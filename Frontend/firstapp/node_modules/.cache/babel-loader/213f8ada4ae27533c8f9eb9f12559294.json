{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pallavi\\\\Desktop\\\\React\\\\firstapp\\\\src\\\\components\\\\userboard\\\\OrderDetails.js\";\n// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n// import { useStripe, useElements, CardElement } from '@stripe/react-stripe-js';\n// import axios from 'axios';\n\n// const CARD_ELEMENT_OPTIONS = {\n//   style: {\n//     base: {\n//       fontSize: '16px',\n//       color: '#32325d',\n//       '::placeholder': {\n//         color: '#a0aec0',\n//       },\n//     },\n//     invalid: {\n//       color: '#e53e3e',\n//     },\n//   },\n// };\n\n// const OrderDetails = () => {\n//   const { orderId } = useParams();\n//   const numericOrderId = Number(orderId);\n//   const stripe = useStripe();\n//   const elements = useElements();\n\n//   const [payment, setPayment] = useState(null);\n//   const [clientSecret, setClientSecret] = useState('');\n//   const [loading, setLoading] = useState(true);\n//   const [paymentStatus, setPaymentStatus] = useState('');\n//   const [error, setError] = useState('');\n//   const token = localStorage.getItem('token');\n\n//   useEffect(() => {\n//     const fetchPaymentIntentAndDetails = async () => {\n//       try {\n//         const intentRes = await axios.post(\n//           'http://localhost:8080/api/payments/create-payment-intent',\n//           { orderId: numericOrderId },\n//           { headers: { Authorization: `Bearer ${token}` } }\n//         );\n\n//         setClientSecret(intentRes.data.clientSecret);\n\n//         const paymentRes = await axios.get(\n//           `http://localhost:8080/api/payments/${orderId}`,\n//           { headers: { Authorization: `Bearer ${token}` } }\n//         );\n\n//         setPayment(paymentRes.data);\n//         setLoading(false);\n//       } catch (err) {\n//         console.error('Error during payment setup:', err);\n//         setError(\n//           err.response?.status === 403\n//             ? 'You are not authorized to view this order.'\n//             : 'Something went wrong. Please try again later.'\n//         );\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchPaymentIntentAndDetails();\n//   }, [orderId, token]);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (!stripe || !elements) return;\n\n//     const result = await stripe.confirmCardPayment(clientSecret, {\n//       payment_method: {\n//         card: elements.getElement(CardElement),\n//       },\n//     });\n\n//     if (result.error) {\n//       setError(result.error.message);\n//     } else {\n//       const status = result.paymentIntent.status;\n//       const mappedStatus =\n//         status === 'succeeded'\n//           ? 'COMPLETED'\n//           : status === 'processing'\n//           ? 'PENDING'\n//           : 'FAILED';\n\n//       try {\n//         await axios.post(\n//           'http://localhost:8080/api/payments/confirm',\n//           {\n//             transactionId: result.paymentIntent.id,\n//             status: mappedStatus,\n//           },\n//           { headers: { Authorization: `Bearer ${token}` } }\n//         );\n\n//         setPaymentStatus(\n//           mappedStatus === 'COMPLETED'\n//             ? 'Payment successful!'\n//             : 'Payment submitted but not completed.'\n//         );\n//       } catch (err) {\n//         console.error('Error confirming payment:', err);\n//         setError('Failed to confirm payment to server.');\n//       }\n//     }\n//   };\n\n//   if (loading) return <p className=\"text-center text-white mt-10\">Loading...</p>;\n//   if (error) return <p className=\"text-center text-red-500 mt-10\">{error}</p>;\n\n//   return (\n//     <div\n//       className=\"flex justify-center items-center min-h-screen w-full px-4\"\n//       style={{\n//         padding: \"20px\",\n//         backgroundImage: `url(\"/artist.png\")`,\n//         backgroundSize: \"100% 100%\",\n//         backgroundRepeat: \"no-repeat\",\n//         backgroundPosition: \"center\",\n//         backgroundAttachment: \"fixed\",\n//         minHeight: \"100vh\",\n//         width: \"100vw\",\n//         overflowX: \"hidden\",\n//       }}\n//     >\n//       <div className=\"w-full max-w-md bg-black bg-opacity-70 rounded-2xl shadow-xl p-8\">\n//         <h2 style={{ color: 'white', fontSize: '24px', marginBottom: '20px' }}>Order Payment</h2>\n\n//         <div style={{ padding: '10px', marginBottom: '20px' }}>\n//           <p style={{ color: 'white' }}>\n//             <strong>Transaction ID:</strong> {payment.transactionId}\n//           </p>\n//           <p style={{ color: 'white' }}>\n//             <strong>Amount:</strong> â‚¹{payment.amount}\n//           </p>\n//           <p style={{ color: 'white' }}>\n//             <strong>ArtworkId:</strong> {payment.artworkId}\n//           </p>\n//         </div>\n\n//         <form onSubmit={handleSubmit}>\n//           <div className=\"p-4 border border-gray-300 rounded-md mb-4 bg-white\">\n//             <CardElement options={CARD_ELEMENT_OPTIONS} />\n//           </div>\n\n//           <button\n//             type=\"submit\"\n//             disabled={!stripe || !elements}\n//             className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded transition duration-200\"\n//           >\n//             Pay Now\n//           </button>\n//         </form>\n\n//         {paymentStatus && (\n//           <p className=\"mt-4 text-center text-green-400 font-semibold\">{paymentStatus}</p>\n//         )}\n\n//         {paymentStatus === 'Payment successful!' && payment?.downloadUrl && (\n//           <div style={{ marginTop: '24px', textAlign: 'center' }}>\n//           <a\n//             href={payment.downloadUrl}\n//             download\n//             style={{\n//               display: 'inline-block',\n//               backgroundColor: '#16a34a',\n//               color: '#fff',\n//               fontWeight: 'bold',\n//               padding: '10px 24px',\n//               borderRadius: '8px',\n//               textDecoration: 'none',\n//               transition: 'background-color 0.2s ease-in-out'\n//             }}\n\n//           >\n//             Download Artwork\n//           </a>\n//         </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default OrderDetails;\n// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n// import { useStripe, useElements, CardElement } from '@stripe/react-stripe-js';\n// import axios from 'axios';\n\n// const CARD_ELEMENT_OPTIONS = {\n//   style: {\n//     base: {\n//       fontSize: '16px',\n//       color: '#32325d',\n//       '::placeholder': { color: '#a0aec0' },\n//     },\n//     invalid: { color: '#e53e3e' },\n//   },\n// };\n\n// const OrderDetails = () => {\n//   const { orderId } = useParams();\n//   const numericOrderId = Number(orderId);\n//   const stripe = useStripe();\n//   const elements = useElements();\n\n//   const [payment, setPayment] = useState(null);\n//   const [clientSecret, setClientSecret] = useState('');\n//   const [loading, setLoading] = useState(true);\n//   const [paymentStatus, setPaymentStatus] = useState('');\n//   const [error, setError] = useState('');\n//   const [downloadUrl, setDownloadUrl] = useState('');\n//   const token = localStorage.getItem('token');\n\n//   useEffect(() => {\n//     const fetchPaymentDetails = async () => {\n//       try {\n//         const intentRes = await axios.post(\n//           'http://localhost:8080/api/payments/create-payment-intent',\n//           { orderId: numericOrderId },\n//           { headers: { Authorization: `Bearer ${token}` } }\n//         );\n//         setClientSecret(intentRes.data.clientSecret);\n\n//         const paymentRes = await axios.get(\n//           `http://localhost:8080/api/payments/${orderId}`,\n//           { headers: { Authorization: `Bearer ${token}` } }\n//         );\n\n//         setPayment(paymentRes.data);\n//         setLoading(false);\n//       } catch (err) {\n//         console.error('Error fetching payment details:', err);\n//         setError(\n//           err.response?.status === 403\n//             ? 'You are not authorized to view this order.'\n//             : 'Something went wrong. Please try again.'\n//         );\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchPaymentDetails();\n//   }, [orderId, token, numericOrderId]);\n\n//   const fetchDownloadUrl = async (artworkId) => {\n//     try {\n//       const res = await axios.get(\n//         `http://localhost:8080/api/artworks/download/${artworkId}`,\n//         { headers: { Authorization: `Bearer ${token}` } }\n//       );\n//       console.log('Received download URL:', res.data.downloadUrl);\n\n//       if (res.data.downloadUrl) {\n//         setDownloadUrl(res.data.downloadUrl);\n//       } else {\n//         console.warn('No download URL found in response');\n//         setError('Download URL not received.');\n//       }\n//     } catch (err) {\n//       console.error('Error fetching download URL:', err);\n//       setError('Failed to fetch download link.');\n//     }\n//   };\n\n//   const refreshPaymentDetails = async () => {\n//     try {\n//       const res = await axios.get(\n//         `http://localhost:8080/api/payments/${orderId}`,\n//         { headers: { Authorization: `Bearer ${token}` } }\n//       );\n//       return res.data;\n//     } catch (err) {\n//       console.error('Error refreshing payment details:', err);\n//       return null;\n//     }\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (!stripe || !elements) return;\n\n//     try {\n//       const result = await stripe.confirmCardPayment(clientSecret, {\n//         payment_method: { card: elements.getElement(CardElement) },\n//       });\n\n//       if (result.error) {\n//         setError(result.error.message);\n//       } else {\n//         const status = result.paymentIntent.status;\n//         const mappedStatus =\n//           status === 'succeeded'\n//             ? 'COMPLETED'\n//             : status === 'processing'\n//             ? 'PENDING'\n//             : 'FAILED';\n\n//         await axios.post(\n//           'http://localhost:8080/api/payments/confirm',\n//           {\n//             transactionId: result.paymentIntent.id,\n//             status: mappedStatus,\n//           },\n//           { headers: { Authorization: `Bearer ${token}` } }\n//         );\n\n//         setPaymentStatus(\n//           mappedStatus === 'COMPLETED'\n//             ? 'Payment successful!'\n//             : 'Payment submitted but not completed.'\n//         );\n\n//         if (mappedStatus === 'COMPLETED') {\n//           console.log(\"Refreshing payment details after confirmation...\");\n//           const updatedPayment = await refreshPaymentDetails();\n//           setPayment(updatedPayment);\n\n//           if (updatedPayment?.artworkId) {\n//             console.log(\"Trying to fetch artwork download URL with ID:\", updatedPayment.artworkId);\n//             fetchDownloadUrl(updatedPayment.artworkId);\n//           } else {\n//             console.warn(\"No artworkId found in updated payment data\");\n//           }\n//         }\n//       }\n//     } catch (err) {\n//       console.error('Error confirming payment:', err);\n//       setError('Failed to confirm payment on the server.');\n//     }\n//   };\n\n//   return (\n//     <div\n//       style={{\n//         padding: \"20px\",\n//         backgroundImage: `url(\"/artist.png\")`,\n//         backgroundSize: \"cover\",\n//         backgroundAttachment: \"fixed\",\n//         minHeight: \"100vh\",\n//         width: \"100vw\",\n//         display: \"flex\",\n//         justifyContent: \"center\",\n//         alignItems: \"center\",\n//       }}\n//     >\n//       <div style={{\n//         width: '100%',\n//         maxWidth: '500px',\n//         background: 'rgba(0, 0, 0, 0.75)',\n//         padding: '30px',\n//         borderRadius: '12px',\n//         color: 'white',\n//       }}>\n//         <h2>Order Payment</h2>\n\n//         {loading ? (\n//           <p style={{ color: 'white' }}>Loading...</p>\n//         ) : (\n//           <>\n//             <p><strong>Transaction ID:</strong> {payment?.transactionId}</p>\n//             <p><strong>Amount:</strong> â‚¹{payment?.amount}</p>\n\n//             <form onSubmit={handleSubmit}>\n//               <div style={{\n//                 padding: '12px',\n//                 border: '1px solid #ccc',\n//                 borderRadius: '8px',\n//                 marginBottom: '15px',\n//                 background: 'white'\n//               }}>\n//                 <CardElement options={CARD_ELEMENT_OPTIONS} />\n//               </div>\n//               <button\n//                 type=\"submit\"\n//                 disabled={!stripe || !elements}\n//                 style={{\n//                   width: '100%',\n//                   backgroundColor: '#007bff',\n//                   color: 'white',\n//                   padding: '10px 16px',\n//                   border: 'none',\n//                   borderRadius: '6px',\n//                   cursor: 'pointer',\n//                   fontWeight: 'bold',\n//                   fontSize: '16px',\n//                 }}\n//               >\n//                 Pay Now\n//               </button>\n//             </form>\n\n//             {paymentStatus && (\n//               <p style={{ marginTop: '20px', textAlign: 'center', color: 'lightgreen', fontWeight: 'bold' }}>\n//                 {paymentStatus}\n//               </p>\n//             )}\n\n//             {error && (\n//               <p style={{ marginTop: '10px', color: 'red', textAlign: 'center' }}>{error}</p>\n//             )}\n\n//             {paymentStatus === 'Payment successful!' && downloadUrl && (\n//               <div style={{ marginTop: '20px', textAlign: 'center' }}>\n//                 <a\n//                   href={downloadUrl}\n//                   download\n//                   style={{\n//                     display: 'inline-block',\n//                     backgroundColor: '#28a745',\n//                     color: 'white',\n//                     padding: '10px 16px',\n//                     borderRadius: '6px',\n//                     textDecoration: 'none',\n//                     fontWeight: 'bold',\n//                   }}\n//                 >\n//                   Download Artwork\n//                 </a>\n//               </div>\n//             )}\n//           </>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default OrderDetails;\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useStripe, useElements, CardElement } from '@stripe/react-stripe-js';\nimport axios from 'axios';\nconst OrderDetails = () => {\n  const {\n    orderId\n  } = useParams();\n  const stripe = useStripe();\n  const elements = useElements();\n  const [paymentData, setPaymentData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [paymentSuccess, setPaymentSuccess] = useState(false);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    const fetchPaymentData = async () => {\n      try {\n        const response = await axios.get(`/api/payment/${orderId}`);\n        setPaymentData(response.data);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching payment details:', error);\n        setError('Failed to fetch payment details');\n        setLoading(false);\n      }\n    };\n    fetchPaymentData();\n  }, [orderId]);\n  const handlePayment = async () => {\n    if (!stripe || !elements) {\n      return;\n    }\n    try {\n      const {\n        data: clientSecretResponse\n      } = await axios.post('/api/payment/confirm', {\n        transactionId: paymentData.transactionId\n      });\n      const clientSecret = clientSecretResponse.clientSecret;\n      const result = await stripe.confirmCardPayment(clientSecret, {\n        payment_method: {\n          card: elements.getElement(CardElement)\n        }\n      });\n      if (result.error) {\n        console.error(result.error.message);\n        setError(result.error.message);\n      } else {\n        if (result.paymentIntent.status === 'succeeded') {\n          setPaymentSuccess(true);\n          setError('');\n        }\n      }\n    } catch (error) {\n      console.error('Payment error:', error);\n      setError('Payment failed');\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"text-center text-xl font-semibold\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  }\n  if (error) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"text-center text-red-500 text-xl\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 12\n      }\n    }, error);\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex flex-col items-center justify-center min-h-screen p-4 bg-gray-50\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 506,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bg-white p-8 rounded-2xl shadow-md w-full max-w-md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 507,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"text-2xl font-bold mb-6 text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 508,\n      columnNumber: 9\n    }\n  }, \"Order Details\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"space-y-4 mb-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 510,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 511,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 511,\n      columnNumber: 16\n    }\n  }, \"Transaction ID:\"), \" \", paymentData.transactionId), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 512,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 512,\n      columnNumber: 16\n    }\n  }, \"Amount:\"), \" $\", paymentData.amount / 100), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 513,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 513,\n      columnNumber: 16\n    }\n  }, \"Artwork ID:\"), \" \", paymentData.artworkId ? paymentData.artworkId : 'N/A')), !paymentSuccess ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 518,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CardElement, {\n    className: \"p-2 border rounded-md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 519,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handlePayment,\n    className: \"w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\",\n    disabled: !stripe || !elements,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 521,\n      columnNumber: 13\n    }\n  }, \"Pay Now\")) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 530,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-green-600 text-xl mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 13\n    }\n  }, \"Payment Successful!\"), /*#__PURE__*/React.createElement(\"a\", {\n    href: `/download/${paymentData.artworkId}`,\n    className: \"inline-block bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 532,\n      columnNumber: 13\n    }\n  }, \"Download Artwork\"))));\n};\nexport default OrderDetails;","map":{"version":3,"names":["React","useEffect","useState","useParams","useStripe","useElements","CardElement","axios","OrderDetails","orderId","stripe","elements","paymentData","setPaymentData","loading","setLoading","paymentSuccess","setPaymentSuccess","error","setError","fetchPaymentData","response","get","data","console","handlePayment","clientSecretResponse","post","transactionId","clientSecret","result","confirmCardPayment","payment_method","card","getElement","message","paymentIntent","status","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","amount","artworkId","Fragment","onClick","disabled","href"],"sources":["C:/Users/Pallavi/Desktop/React/firstapp/src/components/userboard/OrderDetails.js"],"sourcesContent":["\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n// import { useStripe, useElements, CardElement } from '@stripe/react-stripe-js';\r\n// import axios from 'axios';\r\n\r\n// const CARD_ELEMENT_OPTIONS = {\r\n//   style: {\r\n//     base: {\r\n//       fontSize: '16px',\r\n//       color: '#32325d',\r\n//       '::placeholder': {\r\n//         color: '#a0aec0',\r\n//       },\r\n//     },\r\n//     invalid: {\r\n//       color: '#e53e3e',\r\n//     },\r\n//   },\r\n// };\r\n\r\n// const OrderDetails = () => {\r\n//   const { orderId } = useParams();\r\n//   const numericOrderId = Number(orderId);\r\n//   const stripe = useStripe();\r\n//   const elements = useElements();\r\n\r\n//   const [payment, setPayment] = useState(null);\r\n//   const [clientSecret, setClientSecret] = useState('');\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [paymentStatus, setPaymentStatus] = useState('');\r\n//   const [error, setError] = useState('');\r\n//   const token = localStorage.getItem('token');\r\n\r\n//   useEffect(() => {\r\n//     const fetchPaymentIntentAndDetails = async () => {\r\n//       try {\r\n//         const intentRes = await axios.post(\r\n//           'http://localhost:8080/api/payments/create-payment-intent',\r\n//           { orderId: numericOrderId },\r\n//           { headers: { Authorization: `Bearer ${token}` } }\r\n//         );\r\n\r\n//         setClientSecret(intentRes.data.clientSecret);\r\n\r\n//         const paymentRes = await axios.get(\r\n//           `http://localhost:8080/api/payments/${orderId}`,\r\n//           { headers: { Authorization: `Bearer ${token}` } }\r\n//         );\r\n\r\n//         setPayment(paymentRes.data);\r\n//         setLoading(false);\r\n//       } catch (err) {\r\n//         console.error('Error during payment setup:', err);\r\n//         setError(\r\n//           err.response?.status === 403\r\n//             ? 'You are not authorized to view this order.'\r\n//             : 'Something went wrong. Please try again later.'\r\n//         );\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchPaymentIntentAndDetails();\r\n//   }, [orderId, token]);\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     if (!stripe || !elements) return;\r\n\r\n//     const result = await stripe.confirmCardPayment(clientSecret, {\r\n//       payment_method: {\r\n//         card: elements.getElement(CardElement),\r\n//       },\r\n//     });\r\n\r\n//     if (result.error) {\r\n//       setError(result.error.message);\r\n//     } else {\r\n//       const status = result.paymentIntent.status;\r\n//       const mappedStatus =\r\n//         status === 'succeeded'\r\n//           ? 'COMPLETED'\r\n//           : status === 'processing'\r\n//           ? 'PENDING'\r\n//           : 'FAILED';\r\n\r\n//       try {\r\n//         await axios.post(\r\n//           'http://localhost:8080/api/payments/confirm',\r\n//           {\r\n//             transactionId: result.paymentIntent.id,\r\n//             status: mappedStatus,\r\n//           },\r\n//           { headers: { Authorization: `Bearer ${token}` } }\r\n//         );\r\n\r\n//         setPaymentStatus(\r\n//           mappedStatus === 'COMPLETED'\r\n//             ? 'Payment successful!'\r\n//             : 'Payment submitted but not completed.'\r\n//         );\r\n//       } catch (err) {\r\n//         console.error('Error confirming payment:', err);\r\n//         setError('Failed to confirm payment to server.');\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   if (loading) return <p className=\"text-center text-white mt-10\">Loading...</p>;\r\n//   if (error) return <p className=\"text-center text-red-500 mt-10\">{error}</p>;\r\n\r\n//   return (\r\n//     <div\r\n//       className=\"flex justify-center items-center min-h-screen w-full px-4\"\r\n//       style={{\r\n//         padding: \"20px\",\r\n//         backgroundImage: `url(\"/artist.png\")`,\r\n//         backgroundSize: \"100% 100%\",\r\n//         backgroundRepeat: \"no-repeat\",\r\n//         backgroundPosition: \"center\",\r\n//         backgroundAttachment: \"fixed\",\r\n//         minHeight: \"100vh\",\r\n//         width: \"100vw\",\r\n//         overflowX: \"hidden\",\r\n//       }}\r\n//     >\r\n//       <div className=\"w-full max-w-md bg-black bg-opacity-70 rounded-2xl shadow-xl p-8\">\r\n//         <h2 style={{ color: 'white', fontSize: '24px', marginBottom: '20px' }}>Order Payment</h2>\r\n  \r\n//         <div style={{ padding: '10px', marginBottom: '20px' }}>\r\n//           <p style={{ color: 'white' }}>\r\n//             <strong>Transaction ID:</strong> {payment.transactionId}\r\n//           </p>\r\n//           <p style={{ color: 'white' }}>\r\n//             <strong>Amount:</strong> â‚¹{payment.amount}\r\n//           </p>\r\n//           <p style={{ color: 'white' }}>\r\n//             <strong>ArtworkId:</strong> {payment.artworkId}\r\n//           </p>\r\n//         </div>\r\n  \r\n//         <form onSubmit={handleSubmit}>\r\n//           <div className=\"p-4 border border-gray-300 rounded-md mb-4 bg-white\">\r\n//             <CardElement options={CARD_ELEMENT_OPTIONS} />\r\n//           </div>\r\n  \r\n//           <button\r\n//             type=\"submit\"\r\n//             disabled={!stripe || !elements}\r\n//             className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded transition duration-200\"\r\n//           >\r\n//             Pay Now\r\n//           </button>\r\n//         </form>\r\n  \r\n//         {paymentStatus && (\r\n//           <p className=\"mt-4 text-center text-green-400 font-semibold\">{paymentStatus}</p>\r\n//         )}\r\n  \r\n//         {paymentStatus === 'Payment successful!' && payment?.downloadUrl && (\r\n//           <div style={{ marginTop: '24px', textAlign: 'center' }}>\r\n//           <a\r\n//             href={payment.downloadUrl}\r\n//             download\r\n//             style={{\r\n//               display: 'inline-block',\r\n//               backgroundColor: '#16a34a',\r\n//               color: '#fff',\r\n//               fontWeight: 'bold',\r\n//               padding: '10px 24px',\r\n//               borderRadius: '8px',\r\n//               textDecoration: 'none',\r\n//               transition: 'background-color 0.2s ease-in-out'\r\n//             }}\r\n            \r\n//           >\r\n//             Download Artwork\r\n//           </a>\r\n//         </div>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default OrderDetails;\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n// import { useStripe, useElements, CardElement } from '@stripe/react-stripe-js';\r\n// import axios from 'axios';\r\n\r\n// const CARD_ELEMENT_OPTIONS = {\r\n//   style: {\r\n//     base: {\r\n//       fontSize: '16px',\r\n//       color: '#32325d',\r\n//       '::placeholder': { color: '#a0aec0' },\r\n//     },\r\n//     invalid: { color: '#e53e3e' },\r\n//   },\r\n// };\r\n\r\n// const OrderDetails = () => {\r\n//   const { orderId } = useParams();\r\n//   const numericOrderId = Number(orderId);\r\n//   const stripe = useStripe();\r\n//   const elements = useElements();\r\n\r\n//   const [payment, setPayment] = useState(null);\r\n//   const [clientSecret, setClientSecret] = useState('');\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [paymentStatus, setPaymentStatus] = useState('');\r\n//   const [error, setError] = useState('');\r\n//   const [downloadUrl, setDownloadUrl] = useState('');\r\n//   const token = localStorage.getItem('token');\r\n\r\n//   useEffect(() => {\r\n//     const fetchPaymentDetails = async () => {\r\n//       try {\r\n//         const intentRes = await axios.post(\r\n//           'http://localhost:8080/api/payments/create-payment-intent',\r\n//           { orderId: numericOrderId },\r\n//           { headers: { Authorization: `Bearer ${token}` } }\r\n//         );\r\n//         setClientSecret(intentRes.data.clientSecret);\r\n\r\n//         const paymentRes = await axios.get(\r\n//           `http://localhost:8080/api/payments/${orderId}`,\r\n//           { headers: { Authorization: `Bearer ${token}` } }\r\n//         );\r\n\r\n//         setPayment(paymentRes.data);\r\n//         setLoading(false);\r\n//       } catch (err) {\r\n//         console.error('Error fetching payment details:', err);\r\n//         setError(\r\n//           err.response?.status === 403\r\n//             ? 'You are not authorized to view this order.'\r\n//             : 'Something went wrong. Please try again.'\r\n//         );\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchPaymentDetails();\r\n//   }, [orderId, token, numericOrderId]);\r\n\r\n//   const fetchDownloadUrl = async (artworkId) => {\r\n//     try {\r\n//       const res = await axios.get(\r\n//         `http://localhost:8080/api/artworks/download/${artworkId}`,\r\n//         { headers: { Authorization: `Bearer ${token}` } }\r\n//       );\r\n//       console.log('Received download URL:', res.data.downloadUrl);\r\n\r\n//       if (res.data.downloadUrl) {\r\n//         setDownloadUrl(res.data.downloadUrl);\r\n//       } else {\r\n//         console.warn('No download URL found in response');\r\n//         setError('Download URL not received.');\r\n//       }\r\n//     } catch (err) {\r\n//       console.error('Error fetching download URL:', err);\r\n//       setError('Failed to fetch download link.');\r\n//     }\r\n//   };\r\n\r\n//   const refreshPaymentDetails = async () => {\r\n//     try {\r\n//       const res = await axios.get(\r\n//         `http://localhost:8080/api/payments/${orderId}`,\r\n//         { headers: { Authorization: `Bearer ${token}` } }\r\n//       );\r\n//       return res.data;\r\n//     } catch (err) {\r\n//       console.error('Error refreshing payment details:', err);\r\n//       return null;\r\n//     }\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     if (!stripe || !elements) return;\r\n\r\n//     try {\r\n//       const result = await stripe.confirmCardPayment(clientSecret, {\r\n//         payment_method: { card: elements.getElement(CardElement) },\r\n//       });\r\n\r\n//       if (result.error) {\r\n//         setError(result.error.message);\r\n//       } else {\r\n//         const status = result.paymentIntent.status;\r\n//         const mappedStatus =\r\n//           status === 'succeeded'\r\n//             ? 'COMPLETED'\r\n//             : status === 'processing'\r\n//             ? 'PENDING'\r\n//             : 'FAILED';\r\n\r\n//         await axios.post(\r\n//           'http://localhost:8080/api/payments/confirm',\r\n//           {\r\n//             transactionId: result.paymentIntent.id,\r\n//             status: mappedStatus,\r\n//           },\r\n//           { headers: { Authorization: `Bearer ${token}` } }\r\n//         );\r\n\r\n//         setPaymentStatus(\r\n//           mappedStatus === 'COMPLETED'\r\n//             ? 'Payment successful!'\r\n//             : 'Payment submitted but not completed.'\r\n//         );\r\n\r\n//         if (mappedStatus === 'COMPLETED') {\r\n//           console.log(\"Refreshing payment details after confirmation...\");\r\n//           const updatedPayment = await refreshPaymentDetails();\r\n//           setPayment(updatedPayment);\r\n\r\n//           if (updatedPayment?.artworkId) {\r\n//             console.log(\"Trying to fetch artwork download URL with ID:\", updatedPayment.artworkId);\r\n//             fetchDownloadUrl(updatedPayment.artworkId);\r\n//           } else {\r\n//             console.warn(\"No artworkId found in updated payment data\");\r\n//           }\r\n//         }\r\n//       }\r\n//     } catch (err) {\r\n//       console.error('Error confirming payment:', err);\r\n//       setError('Failed to confirm payment on the server.');\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div\r\n//       style={{\r\n//         padding: \"20px\",\r\n//         backgroundImage: `url(\"/artist.png\")`,\r\n//         backgroundSize: \"cover\",\r\n//         backgroundAttachment: \"fixed\",\r\n//         minHeight: \"100vh\",\r\n//         width: \"100vw\",\r\n//         display: \"flex\",\r\n//         justifyContent: \"center\",\r\n//         alignItems: \"center\",\r\n//       }}\r\n//     >\r\n//       <div style={{\r\n//         width: '100%',\r\n//         maxWidth: '500px',\r\n//         background: 'rgba(0, 0, 0, 0.75)',\r\n//         padding: '30px',\r\n//         borderRadius: '12px',\r\n//         color: 'white',\r\n//       }}>\r\n//         <h2>Order Payment</h2>\r\n\r\n//         {loading ? (\r\n//           <p style={{ color: 'white' }}>Loading...</p>\r\n//         ) : (\r\n//           <>\r\n//             <p><strong>Transaction ID:</strong> {payment?.transactionId}</p>\r\n//             <p><strong>Amount:</strong> â‚¹{payment?.amount}</p>\r\n\r\n//             <form onSubmit={handleSubmit}>\r\n//               <div style={{\r\n//                 padding: '12px',\r\n//                 border: '1px solid #ccc',\r\n//                 borderRadius: '8px',\r\n//                 marginBottom: '15px',\r\n//                 background: 'white'\r\n//               }}>\r\n//                 <CardElement options={CARD_ELEMENT_OPTIONS} />\r\n//               </div>\r\n//               <button\r\n//                 type=\"submit\"\r\n//                 disabled={!stripe || !elements}\r\n//                 style={{\r\n//                   width: '100%',\r\n//                   backgroundColor: '#007bff',\r\n//                   color: 'white',\r\n//                   padding: '10px 16px',\r\n//                   border: 'none',\r\n//                   borderRadius: '6px',\r\n//                   cursor: 'pointer',\r\n//                   fontWeight: 'bold',\r\n//                   fontSize: '16px',\r\n//                 }}\r\n//               >\r\n//                 Pay Now\r\n//               </button>\r\n//             </form>\r\n\r\n//             {paymentStatus && (\r\n//               <p style={{ marginTop: '20px', textAlign: 'center', color: 'lightgreen', fontWeight: 'bold' }}>\r\n//                 {paymentStatus}\r\n//               </p>\r\n//             )}\r\n\r\n//             {error && (\r\n//               <p style={{ marginTop: '10px', color: 'red', textAlign: 'center' }}>{error}</p>\r\n//             )}\r\n\r\n//             {paymentStatus === 'Payment successful!' && downloadUrl && (\r\n//               <div style={{ marginTop: '20px', textAlign: 'center' }}>\r\n//                 <a\r\n//                   href={downloadUrl}\r\n//                   download\r\n//                   style={{\r\n//                     display: 'inline-block',\r\n//                     backgroundColor: '#28a745',\r\n//                     color: 'white',\r\n//                     padding: '10px 16px',\r\n//                     borderRadius: '6px',\r\n//                     textDecoration: 'none',\r\n//                     fontWeight: 'bold',\r\n//                   }}\r\n//                 >\r\n//                   Download Artwork\r\n//                 </a>\r\n//               </div>\r\n//             )}\r\n//           </>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default OrderDetails;\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useStripe, useElements, CardElement } from '@stripe/react-stripe-js';\r\nimport axios from 'axios';\r\n\r\nconst OrderDetails = () => {\r\n  const { orderId } = useParams();\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n\r\n  const [paymentData, setPaymentData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [paymentSuccess, setPaymentSuccess] = useState(false);\r\n  const [error, setError] = useState('');\r\n\r\n  useEffect(() => {\r\n    const fetchPaymentData = async () => {\r\n      try {\r\n        const response = await axios.get(`/api/payment/${orderId}`);\r\n        setPaymentData(response.data);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error('Error fetching payment details:', error);\r\n        setError('Failed to fetch payment details');\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchPaymentData();\r\n  }, [orderId]);\r\n\r\n  const handlePayment = async () => {\r\n    if (!stripe || !elements) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const { data: clientSecretResponse } = await axios.post('/api/payment/confirm', {\r\n        transactionId: paymentData.transactionId,\r\n      });\r\n\r\n      const clientSecret = clientSecretResponse.clientSecret;\r\n\r\n      const result = await stripe.confirmCardPayment(clientSecret, {\r\n        payment_method: {\r\n          card: elements.getElement(CardElement),\r\n        },\r\n      });\r\n\r\n      if (result.error) {\r\n        console.error(result.error.message);\r\n        setError(result.error.message);\r\n      } else {\r\n        if (result.paymentIntent.status === 'succeeded') {\r\n          setPaymentSuccess(true);\r\n          setError('');\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Payment error:', error);\r\n      setError('Payment failed');\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <div className=\"text-center text-xl font-semibold\">Loading...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div className=\"text-center text-red-500 text-xl\">{error}</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center justify-center min-h-screen p-4 bg-gray-50\">\r\n      <div className=\"bg-white p-8 rounded-2xl shadow-md w-full max-w-md\">\r\n        <h2 className=\"text-2xl font-bold mb-6 text-center\">Order Details</h2>\r\n\r\n        <div className=\"space-y-4 mb-6\">\r\n          <div><strong>Transaction ID:</strong> {paymentData.transactionId}</div>\r\n          <div><strong>Amount:</strong> ${paymentData.amount / 100}</div>\r\n          <div><strong>Artwork ID:</strong> {paymentData.artworkId ? paymentData.artworkId : 'N/A'}</div>\r\n        </div>\r\n\r\n        {!paymentSuccess ? (\r\n          <>\r\n            <div className=\"mb-6\">\r\n              <CardElement className=\"p-2 border rounded-md\" />\r\n            </div>\r\n            <button\r\n              onClick={handlePayment}\r\n              className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\r\n              disabled={!stripe || !elements}\r\n            >\r\n              Pay Now\r\n            </button>\r\n          </>\r\n        ) : (\r\n          <div className=\"text-center\">\r\n            <p className=\"text-green-600 text-xl mb-4\">Payment Successful!</p>\r\n            <a\r\n              href={`/download/${paymentData.artworkId}`}\r\n              className=\"inline-block bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded\"\r\n            >\r\n              Download Artwork\r\n            </a>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OrderDetails;\r\n\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module"}