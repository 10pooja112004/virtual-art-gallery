{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pallavi\\\\Desktop\\\\React\\\\firstapp\\\\src\\\\components\\\\userboard\\\\OrderDetails.js\";\n// import React, { useEffect, useState } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n// import axios from \"axios\";\n\n// const OrderDetails = () => {\n//   const { orderId } = useParams(); // Route: /orders/:orderId\n//   const numericOrderId = Number(orderId);\n//   const stripe = useStripe();\n//   const elements = useElements();\n\n//   const [order, setOrder] = useState(null);\n//   const [clientSecret, setClientSecret] = useState(\"\");\n//   const [loading, setLoading] = useState(true);\n//   const [paymentStatus, setPaymentStatus] = useState(\"\");\n//   const [error, setError] = useState(\"\");\n\n//   const token = localStorage.getItem(\"token\");\n\n//   useEffect(() => {\n//     const fetchPaymentIntentAndOrder = async () => {\n//       try {\n//         // 1. Create Payment Intent\n//         const intentRes = await axios.post(\n//           \"http://localhost:8080/api/payments/create-payment-intent\",\n//           { orderId: numericOrderId },\n//           {\n//             headers: {\n//               Authorization: `Bearer ${token}`,\n//             },\n//           }\n//         );\n\n//         setClientSecret(intentRes.data.clientSecret);\n\n//         // 2. Fetch Order Details\n//         const orderRes = await axios.get(\n//           `http://localhost:8080/api/payments/${orderId}`,\n//           {\n//             headers: {\n//               Authorization: `Bearer ${token}`,\n//             },\n//           }\n//         );\n//         console.log(\"Fetched order data:\", orderRes.data);\n//         setOrder(orderRes.data);\n//         setLoading(false);\n//       } catch (err) {\n//         console.error(\"Error during payment setup or order fetch:\", err);\n\n//         if (err.response) {\n//           if (err.response.status === 403) {\n//             setError(\"You are not authorized to view this order.\");\n//           } else if (err.response.status === 500) {\n//             setError(\"Something went wrong with payment creation.\");\n//           } else {\n//             setError(\"Failed to initiate payment.\");\n//           }\n//         } else {\n//           setError(\"Network or server error occurred.\");\n//         }\n\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchPaymentIntentAndOrder();\n//   }, [orderId, token]);\n//   useEffect(() => {\n//     if (order) {\n//       console.log(\"Fetched order object:\", order);\n//     }\n//   }, [order]);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (!stripe || !elements) return;\n\n//     const result = await stripe.confirmCardPayment(clientSecret, {\n//       payment_method: {\n//         card: elements.getElement(CardElement),\n//       },\n//     });\n\n//     if (result.error) {\n//       setError(result.error.message);\n//     } else {\n//       const stripeStatus = result.paymentIntent.status;\n//       console.log(\"Stripe status:\", stripeStatus);\n\n//       // Map Stripe status to your backend enum\n//       let mappedStatus;\n//       if (stripeStatus === \"succeeded\") {\n//         mappedStatus = \"COMPLETED\";\n//       } else if (stripeStatus === \"processing\") {\n//         mappedStatus = \"PENDING\";\n//       } else {\n//         mappedStatus = \"FAILED\";\n//       }\n\n//       try {\n//         await axios.post(\n//           \"http://localhost:8080/api/payments/confirm\",\n//           {\n//             transactionId: result.paymentIntent.id,\n//             status: mappedStatus,\n//           },\n//           {\n//             headers: {\n//               Authorization: `Bearer ${token}`,\n//             },\n//           }\n//         );\n\n//         if (mappedStatus === \"COMPLETED\") {\n//           setPaymentStatus(\"Payment successful!\");\n//         } else {\n//           setPaymentStatus(\"Payment submitted but not completed.\");\n//         }\n//       } catch (err) {\n//         console.error(\"Error confirming payment:\", err);\n//         setError(\"Failed to confirm payment to server.\");\n//       }\n//     }\n//   };\n\n//   if (loading) return <p className=\"text-white text-center mt-10\">Loading...</p>;\n//   if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\n\n//   return (\n//     <div className=\"max-w-lg mx-auto mt-10 bg-white p-6 rounded-xl shadow-lg\">\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">Order Payment</h2>\n//       <div className=\"mb-4\">\n//   <p><strong>Artwork ID:</strong> {order.artworkId ? order.artworkId : \"N/A\"}</p>\n//   <p><strong>Buyer ID:</strong> {order.buyerId ? order.buyerId : \"N/A\"}</p>\n//   <p><strong>Price:</strong> â‚¹{order.totalPrice ? order.totalPrice : \"N/A\"}</p>\n//   <p><strong>Artwork Title:</strong> {order.artworkTitle ? order.artworkTitle : \"N/A\"}</p>\n//   <p><strong>Buyer Username:</strong> {order.buyerUsername ? order.buyerUsername : \"N/A\"}</p>\n// </div>\n\n//       <form onSubmit={handleSubmit}>\n//         <div className=\"mb-4 p-4 border rounded\">\n//           <CardElement />\n//         </div>\n//         <button\n//           type=\"submit\"\n//           disabled={!stripe || !elements}\n//           className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n//         >\n//           Pay Now\n//         </button>\n//       </form>\n\n//       {paymentStatus && <p className=\"mt-4 text-green-600\">{paymentStatus}</p>}\n//     </div>\n//   );\n// };\n\n// export default OrderDetails;\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport axios from \"axios\";\nconst OrderDetails = () => {\n  var _order$price;\n  const {\n    orderId\n  } = useParams(); // Route: /orders/:orderId\n  const numericOrderId = Number(orderId);\n  const stripe = useStripe();\n  const elements = useElements();\n  const [order, setOrder] = useState(null);\n  const [payment, setPayment] = useState(null);\n  const [clientSecret, setClientSecret] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [paymentStatus, setPaymentStatus] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const token = localStorage.getItem(\"token\");\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // 1. Create Payment Intent\n        const intentRes = await axios.post(\"http://localhost:8080/api/payments/create-payment-intent\", {\n          orderId: numericOrderId\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setClientSecret(intentRes.data.clientSecret);\n\n        // 2. Fetch Order Details\n        const orderRes = await axios.get(`http://localhost:8080/api/orders/${orderId}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setOrder(orderRes.data);\n        console.log(\"Fetched order details:\", orderRes.data);\n\n        // 3. Fetch Payment Info\n        const paymentRes = await axios.get(`http://localhost:8080/api/payments/${orderId}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setPayment(paymentRes.data);\n        console.log(\"Fetched payment info:\", paymentRes.data);\n        setLoading(false);\n      } catch (err) {\n        console.error(\"Error during payment setup or data fetch:\", err);\n        setError(\"Failed to load payment or order details.\");\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [orderId, token]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!stripe || !elements) return;\n    const result = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement)\n      }\n    });\n    if (result.error) {\n      setError(result.error.message);\n    } else {\n      const stripeStatus = result.paymentIntent.status;\n      console.log(\"Stripe status:\", stripeStatus);\n      let mappedStatus;\n      if (stripeStatus === \"succeeded\") {\n        mappedStatus = \"COMPLETED\";\n      } else if (stripeStatus === \"processing\") {\n        mappedStatus = \"PENDING\";\n      } else {\n        mappedStatus = \"FAILED\";\n      }\n      try {\n        await axios.post(\"http://localhost:8080/api/payments/confirm\", {\n          transactionId: result.paymentIntent.id,\n          status: mappedStatus\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (mappedStatus === \"COMPLETED\") {\n          setPaymentStatus(\"Payment successful!\");\n        } else {\n          setPaymentStatus(\"Payment submitted but not completed.\");\n        }\n      } catch (err) {\n        console.error(\"Error confirming payment:\", err);\n        setError(\"Failed to confirm payment to server.\");\n      }\n    }\n  };\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-white text-center mt-10\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-red-500 text-center mt-10\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 21\n    }\n  }, error);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"max-w-lg mx-auto mt-10 bg-white p-6 rounded-xl shadow-lg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"text-2xl font-bold mb-4 text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 7\n    }\n  }, \"Order Payment\"), order && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 14\n    }\n  }, \"Artwork Title:\"), \" \", order.artworkTitle || \"N/A\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 14\n    }\n  }, \"Buyer Username:\"), \" \", order.buyerUsername || \"N/A\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 14\n    }\n  }, \"Price:\"), \" \\u20B9\", (_order$price = order.price) !== null && _order$price !== void 0 ? _order$price : \"N/A\")), payment && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 14\n    }\n  }, \"Payment Method:\"), \" \", payment.paymentMethod || \"N/A\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 14\n    }\n  }, \"Status:\"), \" \", payment.status || \"N/A\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 14\n    }\n  }, \"Transaction ID:\"), \" \", payment.transactionId || \"N/A\")), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-4 p-4 border rounded\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CardElement, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    disabled: !stripe || !elements,\n    className: \"w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 9\n    }\n  }, \"Pay Now\")), paymentStatus && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"mt-4 text-green-600\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 25\n    }\n  }, paymentStatus));\n};\nexport default OrderDetails;","map":{"version":3,"names":["React","useEffect","useState","useParams","CardElement","useStripe","useElements","axios","OrderDetails","_order$price","orderId","numericOrderId","Number","stripe","elements","order","setOrder","payment","setPayment","clientSecret","setClientSecret","loading","setLoading","paymentStatus","setPaymentStatus","error","setError","token","localStorage","getItem","fetchData","intentRes","post","headers","Authorization","data","orderRes","get","console","log","paymentRes","err","handleSubmit","e","preventDefault","result","confirmCardPayment","payment_method","card","getElement","message","stripeStatus","paymentIntent","status","mappedStatus","transactionId","id","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","artworkTitle","buyerUsername","price","paymentMethod","onSubmit","type","disabled"],"sources":["C:/Users/Pallavi/Desktop/React/firstapp/src/components/userboard/OrderDetails.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import { useParams } from \"react-router-dom\";\r\n// import { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\r\n// import axios from \"axios\";\r\n\r\n// const OrderDetails = () => {\r\n//   const { orderId } = useParams(); // Route: /orders/:orderId\r\n//   const numericOrderId = Number(orderId);\r\n//   const stripe = useStripe();\r\n//   const elements = useElements();\r\n\r\n//   const [order, setOrder] = useState(null);\r\n//   const [clientSecret, setClientSecret] = useState(\"\");\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [paymentStatus, setPaymentStatus] = useState(\"\");\r\n//   const [error, setError] = useState(\"\");\r\n\r\n//   const token = localStorage.getItem(\"token\");\r\n\r\n//   useEffect(() => {\r\n//     const fetchPaymentIntentAndOrder = async () => {\r\n//       try {\r\n//         // 1. Create Payment Intent\r\n//         const intentRes = await axios.post(\r\n//           \"http://localhost:8080/api/payments/create-payment-intent\",\r\n//           { orderId: numericOrderId },\r\n//           {\r\n//             headers: {\r\n//               Authorization: `Bearer ${token}`,\r\n//             },\r\n//           }\r\n//         );\r\n\r\n//         setClientSecret(intentRes.data.clientSecret);\r\n\r\n//         // 2. Fetch Order Details\r\n//         const orderRes = await axios.get(\r\n//           `http://localhost:8080/api/payments/${orderId}`,\r\n//           {\r\n//             headers: {\r\n//               Authorization: `Bearer ${token}`,\r\n//             },\r\n//           }\r\n//         );\r\n//         console.log(\"Fetched order data:\", orderRes.data);\r\n//         setOrder(orderRes.data);\r\n//         setLoading(false);\r\n//       } catch (err) {\r\n//         console.error(\"Error during payment setup or order fetch:\", err);\r\n\r\n//         if (err.response) {\r\n//           if (err.response.status === 403) {\r\n//             setError(\"You are not authorized to view this order.\");\r\n//           } else if (err.response.status === 500) {\r\n//             setError(\"Something went wrong with payment creation.\");\r\n//           } else {\r\n//             setError(\"Failed to initiate payment.\");\r\n//           }\r\n//         } else {\r\n//           setError(\"Network or server error occurred.\");\r\n//         }\r\n\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchPaymentIntentAndOrder();\r\n//   }, [orderId, token]);\r\n//   useEffect(() => {\r\n//     if (order) {\r\n//       console.log(\"Fetched order object:\", order);\r\n//     }\r\n//   }, [order]);\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n\r\n//     if (!stripe || !elements) return;\r\n\r\n//     const result = await stripe.confirmCardPayment(clientSecret, {\r\n//       payment_method: {\r\n//         card: elements.getElement(CardElement),\r\n//       },\r\n//     });\r\n\r\n//     if (result.error) {\r\n//       setError(result.error.message);\r\n//     } else {\r\n//       const stripeStatus = result.paymentIntent.status;\r\n//       console.log(\"Stripe status:\", stripeStatus);\r\n\r\n//       // Map Stripe status to your backend enum\r\n//       let mappedStatus;\r\n//       if (stripeStatus === \"succeeded\") {\r\n//         mappedStatus = \"COMPLETED\";\r\n//       } else if (stripeStatus === \"processing\") {\r\n//         mappedStatus = \"PENDING\";\r\n//       } else {\r\n//         mappedStatus = \"FAILED\";\r\n//       }\r\n\r\n//       try {\r\n//         await axios.post(\r\n//           \"http://localhost:8080/api/payments/confirm\",\r\n//           {\r\n//             transactionId: result.paymentIntent.id,\r\n//             status: mappedStatus,\r\n//           },\r\n//           {\r\n//             headers: {\r\n//               Authorization: `Bearer ${token}`,\r\n//             },\r\n//           }\r\n//         );\r\n\r\n//         if (mappedStatus === \"COMPLETED\") {\r\n//           setPaymentStatus(\"Payment successful!\");\r\n//         } else {\r\n//           setPaymentStatus(\"Payment submitted but not completed.\");\r\n//         }\r\n//       } catch (err) {\r\n//         console.error(\"Error confirming payment:\", err);\r\n//         setError(\"Failed to confirm payment to server.\");\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   if (loading) return <p className=\"text-white text-center mt-10\">Loading...</p>;\r\n//   if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n\r\n//   return (\r\n//     <div className=\"max-w-lg mx-auto mt-10 bg-white p-6 rounded-xl shadow-lg\">\r\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">Order Payment</h2>\r\n//       <div className=\"mb-4\">\r\n//   <p><strong>Artwork ID:</strong> {order.artworkId ? order.artworkId : \"N/A\"}</p>\r\n//   <p><strong>Buyer ID:</strong> {order.buyerId ? order.buyerId : \"N/A\"}</p>\r\n//   <p><strong>Price:</strong> â‚¹{order.totalPrice ? order.totalPrice : \"N/A\"}</p>\r\n//   <p><strong>Artwork Title:</strong> {order.artworkTitle ? order.artworkTitle : \"N/A\"}</p>\r\n//   <p><strong>Buyer Username:</strong> {order.buyerUsername ? order.buyerUsername : \"N/A\"}</p>\r\n// </div>\r\n\r\n\r\n//       <form onSubmit={handleSubmit}>\r\n//         <div className=\"mb-4 p-4 border rounded\">\r\n//           <CardElement />\r\n//         </div>\r\n//         <button\r\n//           type=\"submit\"\r\n//           disabled={!stripe || !elements}\r\n//           className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\r\n//         >\r\n//           Pay Now\r\n//         </button>\r\n//       </form>\r\n\r\n//       {paymentStatus && <p className=\"mt-4 text-green-600\">{paymentStatus}</p>}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default OrderDetails;\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\r\nimport axios from \"axios\";\r\n\r\nconst OrderDetails = () => {\r\n  const { orderId } = useParams(); // Route: /orders/:orderId\r\n  const numericOrderId = Number(orderId);\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n\r\n  const [order, setOrder] = useState(null);\r\n  const [payment, setPayment] = useState(null);\r\n  const [clientSecret, setClientSecret] = useState(\"\");\r\n  const [loading, setLoading] = useState(true);\r\n  const [paymentStatus, setPaymentStatus] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const token = localStorage.getItem(\"token\");\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        // 1. Create Payment Intent\r\n        const intentRes = await axios.post(\r\n          \"http://localhost:8080/api/payments/create-payment-intent\",\r\n          { orderId: numericOrderId },\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`,\r\n            },\r\n          }\r\n        );\r\n        setClientSecret(intentRes.data.clientSecret);\r\n\r\n        // 2. Fetch Order Details\r\n        const orderRes = await axios.get(`http://localhost:8080/api/orders/${orderId}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n        setOrder(orderRes.data);\r\n        console.log(\"Fetched order details:\", orderRes.data);\r\n\r\n        // 3. Fetch Payment Info\r\n        const paymentRes = await axios.get(`http://localhost:8080/api/payments/${orderId}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n        setPayment(paymentRes.data);\r\n        console.log(\"Fetched payment info:\", paymentRes.data);\r\n\r\n        setLoading(false);\r\n      } catch (err) {\r\n        console.error(\"Error during payment setup or data fetch:\", err);\r\n        setError(\"Failed to load payment or order details.\");\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [orderId, token]);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!stripe || !elements) return;\r\n\r\n    const result = await stripe.confirmCardPayment(clientSecret, {\r\n      payment_method: {\r\n        card: elements.getElement(CardElement),\r\n      },\r\n    });\r\n\r\n    if (result.error) {\r\n      setError(result.error.message);\r\n    } else {\r\n      const stripeStatus = result.paymentIntent.status;\r\n      console.log(\"Stripe status:\", stripeStatus);\r\n\r\n      let mappedStatus;\r\n      if (stripeStatus === \"succeeded\") {\r\n        mappedStatus = \"COMPLETED\";\r\n      } else if (stripeStatus === \"processing\") {\r\n        mappedStatus = \"PENDING\";\r\n      } else {\r\n        mappedStatus = \"FAILED\";\r\n      }\r\n\r\n      try {\r\n        await axios.post(\r\n          \"http://localhost:8080/api/payments/confirm\",\r\n          {\r\n            transactionId: result.paymentIntent.id,\r\n            status: mappedStatus,\r\n          },\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`,\r\n            },\r\n          }\r\n        );\r\n\r\n        if (mappedStatus === \"COMPLETED\") {\r\n          setPaymentStatus(\"Payment successful!\");\r\n        } else {\r\n          setPaymentStatus(\"Payment submitted but not completed.\");\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Error confirming payment:\", err);\r\n        setError(\"Failed to confirm payment to server.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  if (loading) return <p className=\"text-white text-center mt-10\">Loading...</p>;\r\n  if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n\r\n  return (\r\n    <div className=\"max-w-lg mx-auto mt-10 bg-white p-6 rounded-xl shadow-lg\">\r\n      <h2 className=\"text-2xl font-bold mb-4 text-center\">Order Payment</h2>\r\n\r\n      {order && (\r\n        <div className=\"mb-4\">\r\n          <p><strong>Artwork Title:</strong> {order.artworkTitle || \"N/A\"}</p>\r\n          <p><strong>Buyer Username:</strong> {order.buyerUsername || \"N/A\"}</p>\r\n          <p><strong>Price:</strong> â‚¹{order.price ?? \"N/A\"}</p>\r\n        </div>\r\n      )}\r\n\r\n      {payment && (\r\n        <div className=\"mb-4\">\r\n          <p><strong>Payment Method:</strong> {payment.paymentMethod || \"N/A\"}</p>\r\n          <p><strong>Status:</strong> {payment.status || \"N/A\"}</p>\r\n          <p><strong>Transaction ID:</strong> {payment.transactionId || \"N/A\"}</p>\r\n        </div>\r\n      )}\r\n\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"mb-4 p-4 border rounded\">\r\n          <CardElement />\r\n        </div>\r\n        <button\r\n          type=\"submit\"\r\n          disabled={!stripe || !elements}\r\n          className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\r\n        >\r\n          Pay Now\r\n        </button>\r\n      </form>\r\n\r\n      {paymentStatus && <p className=\"mt-4 text-green-600\">{paymentStatus}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OrderDetails;\r\n"],"mappings":";AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,WAAW,EAAEC,SAAS,EAAEC,WAAW,QAAQ,yBAAyB;AAC7E,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAA,IAAAC,YAAA;EACzB,MAAM;IAAEC;EAAQ,CAAC,GAAGP,SAAS,CAAC,CAAC,CAAC,CAAC;EACjC,MAAMQ,cAAc,GAAGC,MAAM,CAACF,OAAO,CAAC;EACtC,MAAMG,MAAM,GAAGR,SAAS,CAAC,CAAC;EAC1B,MAAMS,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAE9B,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC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","ignoreList":[]},"metadata":{},"sourceType":"module"}