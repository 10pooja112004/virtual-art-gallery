{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pallavi\\\\Desktop\\\\React\\\\firstapp\\\\src\\\\components\\\\userboard\\\\OrderDetails.js\";\n// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n// import { useStripe, useElements, CardElement } from '@stripe/react-stripe-js';\n// import axios from 'axios';\n\n// const CARD_ELEMENT_OPTIONS = {\n//   style: {\n//     base: {\n//       fontSize: '16px',\n//       color: '#32325d',\n//       '::placeholder': {\n//         color: '#a0aec0',\n//       },\n//     },\n//     invalid: {\n//       color: '#e53e3e',\n//     },\n//   },\n// };\n\n// const OrderDetails = () => {\n//   const { orderId } = useParams();\n//   const numericOrderId = Number(orderId);\n//   const stripe = useStripe();\n//   const elements = useElements();\n\n//   const [payment, setPayment] = useState(null);\n//   const [clientSecret, setClientSecret] = useState('');\n//   const [loading, setLoading] = useState(true);\n//   const [paymentStatus, setPaymentStatus] = useState('');\n//   const [error, setError] = useState('');\n//   const token = localStorage.getItem('token');\n\n//   useEffect(() => {\n//     const fetchPaymentIntentAndDetails = async () => {\n//       try {\n//         const intentRes = await axios.post(\n//           'http://localhost:8080/api/payments/create-payment-intent',\n//           { orderId: numericOrderId },\n//           { headers: { Authorization: `Bearer ${token}` } }\n//         );\n\n//         setClientSecret(intentRes.data.clientSecret);\n\n//         const paymentRes = await axios.get(\n//           `http://localhost:8080/api/payments/${orderId}`,\n//           { headers: { Authorization: `Bearer ${token}` } }\n//         );\n\n//         setPayment(paymentRes.data);\n//         setLoading(false);\n//       } catch (err) {\n//         console.error('Error during payment setup:', err);\n//         setError(\n//           err.response?.status === 403\n//             ? 'You are not authorized to view this order.'\n//             : 'Something went wrong. Please try again later.'\n//         );\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchPaymentIntentAndDetails();\n//   }, [orderId, token]);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (!stripe || !elements) return;\n\n//     const result = await stripe.confirmCardPayment(clientSecret, {\n//       payment_method: {\n//         card: elements.getElement(CardElement),\n//       },\n//     });\n\n//     if (result.error) {\n//       setError(result.error.message);\n//     } else {\n//       const status = result.paymentIntent.status;\n//       const mappedStatus =\n//         status === 'succeeded'\n//           ? 'COMPLETED'\n//           : status === 'processing'\n//           ? 'PENDING'\n//           : 'FAILED';\n\n//       try {\n//         await axios.post(\n//           'http://localhost:8080/api/payments/confirm',\n//           {\n//             transactionId: result.paymentIntent.id,\n//             status: mappedStatus,\n//           },\n//           { headers: { Authorization: `Bearer ${token}` } }\n//         );\n\n//         setPaymentStatus(\n//           mappedStatus === 'COMPLETED'\n//             ? 'Payment successful!'\n//             : 'Payment submitted but not completed.'\n//         );\n//       } catch (err) {\n//         console.error('Error confirming payment:', err);\n//         setError('Failed to confirm payment to server.');\n//       }\n//     }\n//   };\n\n//   if (loading) return <p className=\"text-center text-white mt-10\">Loading...</p>;\n//   if (error) return <p className=\"text-center text-red-500 mt-10\">{error}</p>;\n\n//   return (\n//     <div\n//       className=\"flex justify-center items-center min-h-screen w-full px-4\"\n//       style={{\n//         padding: \"20px\",\n//         backgroundImage: `url(\"/artist.png\")`,\n//         backgroundSize: \"100% 100%\",\n//         backgroundRepeat: \"no-repeat\",\n//         backgroundPosition: \"center\",\n//         backgroundAttachment: \"fixed\",\n//         minHeight: \"100vh\",\n//         width: \"100vw\",\n//         overflowX: \"hidden\",\n//       }}\n//     >\n//       <div className=\"w-full max-w-md bg-black bg-opacity-70 rounded-2xl shadow-xl p-8\">\n//         <h2 style={{ color: 'white', fontSize: '24px', marginBottom: '20px' }}>Order Payment</h2>\n\n//         <div style={{ padding: '10px', marginBottom: '20px' }}>\n//           <p style={{ color: 'white' }}>\n//             <strong>Transaction ID:</strong> {payment.transactionId}\n//           </p>\n//           <p style={{ color: 'white' }}>\n//             <strong>Amount:</strong> â‚¹{payment.amount}\n//           </p>\n//           <p style={{ color: 'white' }}>\n//             <strong>ArtworkId:</strong> {payment.artworkId}\n//           </p>\n//         </div>\n\n//         <form onSubmit={handleSubmit}>\n//           <div className=\"p-4 border border-gray-300 rounded-md mb-4 bg-white\">\n//             <CardElement options={CARD_ELEMENT_OPTIONS} />\n//           </div>\n\n//           <button\n//             type=\"submit\"\n//             disabled={!stripe || !elements}\n//             className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded transition duration-200\"\n//           >\n//             Pay Now\n//           </button>\n//         </form>\n\n//         {paymentStatus && (\n//           <p className=\"mt-4 text-center text-green-400 font-semibold\">{paymentStatus}</p>\n//         )}\n\n//         {paymentStatus === 'Payment successful!' && payment?.downloadUrl && (\n//           <div style={{ marginTop: '24px', textAlign: 'center' }}>\n//           <a\n//             href={payment.downloadUrl}\n//             download\n//             style={{\n//               display: 'inline-block',\n//               backgroundColor: '#16a34a',\n//               color: '#fff',\n//               fontWeight: 'bold',\n//               padding: '10px 24px',\n//               borderRadius: '8px',\n//               textDecoration: 'none',\n//               transition: 'background-color 0.2s ease-in-out'\n//             }}\n\n//           >\n//             Download Artwork\n//           </a>\n//         </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default OrderDetails;\n// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n// import { useStripe, useElements, CardElement } from '@stripe/react-stripe-js';\n// import axios from 'axios';\n\n// const CARD_ELEMENT_OPTIONS = {\n//   style: {\n//     base: {\n//       fontSize: '16px',\n//       color: '#32325d',\n//       '::placeholder': { color: '#a0aec0' },\n//     },\n//     invalid: { color: '#e53e3e' },\n//   },\n// };\n\n// const OrderDetails = () => {\n//   const { orderId } = useParams();\n//   const numericOrderId = Number(orderId);\n//   const stripe = useStripe();\n//   const elements = useElements();\n\n//   const [payment, setPayment] = useState(null);\n//   const [clientSecret, setClientSecret] = useState('');\n//   const [loading, setLoading] = useState(true);\n//   const [paymentStatus, setPaymentStatus] = useState('');\n//   const [error, setError] = useState('');\n//   const [downloadUrl, setDownloadUrl] = useState('');\n//   const token = localStorage.getItem('token');\n\n//   useEffect(() => {\n//     const fetchPaymentDetails = async () => {\n//       try {\n//         const intentRes = await axios.post(\n//           'http://localhost:8080/api/payments/create-payment-intent',\n//           { orderId: numericOrderId },\n//           { headers: { Authorization: `Bearer ${token}` } }\n//         );\n//         setClientSecret(intentRes.data.clientSecret);\n\n//         const paymentRes = await axios.get(\n//           `http://localhost:8080/api/payments/${orderId}`,\n//           { headers: { Authorization: `Bearer ${token}` } }\n//         );\n\n//         setPayment(paymentRes.data);\n//         setLoading(false);\n//       } catch (err) {\n//         console.error('Error fetching payment details:', err);\n//         setError(\n//           err.response?.status === 403\n//             ? 'You are not authorized to view this order.'\n//             : 'Something went wrong. Please try again.'\n//         );\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchPaymentDetails();\n//   }, [orderId, token, numericOrderId]);\n\n//   const fetchDownloadUrl = async (artworkId) => {\n//     try {\n//       const res = await axios.get(\n//         `http://localhost:8080/api/artworks/download/${artworkId}`,\n//         { headers: { Authorization: `Bearer ${token}` } }\n//       );\n//       console.log('Received download URL:', res.data.downloadUrl);\n\n//       if (res.data.downloadUrl) {\n//         setDownloadUrl(res.data.downloadUrl);\n//       } else {\n//         console.warn('No download URL found in response');\n//         setError('Download URL not received.');\n//       }\n//     } catch (err) {\n//       console.error('Error fetching download URL:', err);\n//       setError('Failed to fetch download link.');\n//     }\n//   };\n\n//   const refreshPaymentDetails = async () => {\n//     try {\n//       const res = await axios.get(\n//         `http://localhost:8080/api/payments/${orderId}`,\n//         { headers: { Authorization: `Bearer ${token}` } }\n//       );\n//       return res.data;\n//     } catch (err) {\n//       console.error('Error refreshing payment details:', err);\n//       return null;\n//     }\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (!stripe || !elements) return;\n\n//     try {\n//       const result = await stripe.confirmCardPayment(clientSecret, {\n//         payment_method: { card: elements.getElement(CardElement) },\n//       });\n\n//       if (result.error) {\n//         setError(result.error.message);\n//       } else {\n//         const status = result.paymentIntent.status;\n//         const mappedStatus =\n//           status === 'succeeded'\n//             ? 'COMPLETED'\n//             : status === 'processing'\n//             ? 'PENDING'\n//             : 'FAILED';\n\n//         await axios.post(\n//           'http://localhost:8080/api/payments/confirm',\n//           {\n//             transactionId: result.paymentIntent.id,\n//             status: mappedStatus,\n//           },\n//           { headers: { Authorization: `Bearer ${token}` } }\n//         );\n\n//         setPaymentStatus(\n//           mappedStatus === 'COMPLETED'\n//             ? 'Payment successful!'\n//             : 'Payment submitted but not completed.'\n//         );\n\n//         if (mappedStatus === 'COMPLETED') {\n//           console.log(\"Refreshing payment details after confirmation...\");\n//           const updatedPayment = await refreshPaymentDetails();\n//           setPayment(updatedPayment);\n\n//           if (updatedPayment?.artworkId) {\n//             console.log(\"Trying to fetch artwork download URL with ID:\", updatedPayment.artworkId);\n//             fetchDownloadUrl(updatedPayment.artworkId);\n//           } else {\n//             console.warn(\"No artworkId found in updated payment data\");\n//           }\n//         }\n//       }\n//     } catch (err) {\n//       console.error('Error confirming payment:', err);\n//       setError('Failed to confirm payment on the server.');\n//     }\n//   };\n\n//   return (\n//     <div\n//       style={{\n//         padding: \"20px\",\n//         backgroundImage: `url(\"/artist.png\")`,\n//         backgroundSize: \"cover\",\n//         backgroundAttachment: \"fixed\",\n//         minHeight: \"100vh\",\n//         width: \"100vw\",\n//         display: \"flex\",\n//         justifyContent: \"center\",\n//         alignItems: \"center\",\n//       }}\n//     >\n//       <div style={{\n//         width: '100%',\n//         maxWidth: '500px',\n//         background: 'rgba(0, 0, 0, 0.75)',\n//         padding: '30px',\n//         borderRadius: '12px',\n//         color: 'white',\n//       }}>\n//         <h2>Order Payment</h2>\n\n//         {loading ? (\n//           <p style={{ color: 'white' }}>Loading...</p>\n//         ) : (\n//           <>\n//             <p><strong>Transaction ID:</strong> {payment?.transactionId}</p>\n//             <p><strong>Amount:</strong> â‚¹{payment?.amount}</p>\n\n//             <form onSubmit={handleSubmit}>\n//               <div style={{\n//                 padding: '12px',\n//                 border: '1px solid #ccc',\n//                 borderRadius: '8px',\n//                 marginBottom: '15px',\n//                 background: 'white'\n//               }}>\n//                 <CardElement options={CARD_ELEMENT_OPTIONS} />\n//               </div>\n//               <button\n//                 type=\"submit\"\n//                 disabled={!stripe || !elements}\n//                 style={{\n//                   width: '100%',\n//                   backgroundColor: '#007bff',\n//                   color: 'white',\n//                   padding: '10px 16px',\n//                   border: 'none',\n//                   borderRadius: '6px',\n//                   cursor: 'pointer',\n//                   fontWeight: 'bold',\n//                   fontSize: '16px',\n//                 }}\n//               >\n//                 Pay Now\n//               </button>\n//             </form>\n\n//             {paymentStatus && (\n//               <p style={{ marginTop: '20px', textAlign: 'center', color: 'lightgreen', fontWeight: 'bold' }}>\n//                 {paymentStatus}\n//               </p>\n//             )}\n\n//             {error && (\n//               <p style={{ marginTop: '10px', color: 'red', textAlign: 'center' }}>{error}</p>\n//             )}\n\n//             {paymentStatus === 'Payment successful!' && downloadUrl && (\n//               <div style={{ marginTop: '20px', textAlign: 'center' }}>\n//                 <a\n//                   href={downloadUrl}\n//                   download\n//                   style={{\n//                     display: 'inline-block',\n//                     backgroundColor: '#28a745',\n//                     color: 'white',\n//                     padding: '10px 16px',\n//                     borderRadius: '6px',\n//                     textDecoration: 'none',\n//                     fontWeight: 'bold',\n//                   }}\n//                 >\n//                   Download Artwork\n//                 </a>\n//               </div>\n//             )}\n//           </>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default OrderDetails;\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useStripe, useElements, CardElement } from '@stripe/react-stripe-js';\nimport axios from 'axios';\nconst CARD_ELEMENT_OPTIONS = {\n  style: {\n    base: {\n      fontSize: '16px',\n      color: '#32325d',\n      '::placeholder': {\n        color: '#a0aec0'\n      }\n    },\n    invalid: {\n      color: '#e53e3e'\n    }\n  }\n};\nconst OrderDetails = () => {\n  const {\n    orderId\n  } = useParams();\n  const stripe = useStripe();\n  const elements = useElements();\n  const [payment, setPayment] = useState(null);\n  const [clientSecret, setClientSecret] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [paymentStatus, setPaymentStatus] = useState('');\n  const [error, setError] = useState('');\n  const token = localStorage.getItem('token');\n  useEffect(() => {\n    const fetchPaymentIntentAndDetails = async () => {\n      if (!token) {\n        setError('Authentication token missing. Please login again.');\n        setLoading(false);\n        return;\n      }\n      try {\n        const [intentRes, paymentRes] = await Promise.all([axios.post('http://localhost:8080/api/payments/create-payment-intent', {\n          orderId: Number(orderId)\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        }), axios.get(`http://localhost:8080/api/payments/${orderId}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        })]);\n        setClientSecret(intentRes.data.clientSecret);\n        setPayment(paymentRes.data);\n        setLoading(false);\n      } catch (err) {\n        var _err$response;\n        console.error('Error fetching payment details:', err);\n        if (((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.status) === 403) {\n          setError('You are not authorized to view this order. Please check if you have permission.');\n        } else {\n          setError('Something went wrong. Please try again later.');\n        }\n        setLoading(false);\n      }\n    };\n    fetchPaymentIntentAndDetails();\n  }, [orderId, token]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!stripe || !elements) return;\n    try {\n      const result = await stripe.confirmCardPayment(clientSecret, {\n        payment_method: {\n          card: elements.getElement(CardElement)\n        }\n      });\n      if (result.error) {\n        setError(result.error.message);\n      } else {\n        const status = result.paymentIntent.status;\n        const mappedStatus = status === 'succeeded' ? 'COMPLETED' : status === 'processing' ? 'PENDING' : 'FAILED';\n        await axios.post('http://localhost:8080/api/payments/confirm', {\n          transactionId: result.paymentIntent.id,\n          status: mappedStatus\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setPaymentStatus(mappedStatus === 'COMPLETED' ? 'Payment successful!' : 'Payment submitted but not completed.');\n      }\n    } catch (err) {\n      console.error('Payment submission error:', err);\n      setError('Payment failed. Please try again.');\n    }\n  };\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-center text-white mt-10\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 544,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-center text-red-500 mt-10\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 545,\n      columnNumber: 21\n    }\n  }, error);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex justify-center items-center min-h-screen w-full px-4\",\n    style: {\n      padding: \"20px\",\n      backgroundImage: `url(\"/artist.png\")`,\n      backgroundSize: \"100% 100%\",\n      backgroundRepeat: \"no-repeat\",\n      backgroundPosition: \"center\",\n      backgroundAttachment: \"fixed\",\n      minHeight: \"100vh\",\n      width: \"100vw\",\n      overflowX: \"hidden\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 548,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"w-full max-w-md bg-black bg-opacity-70 rounded-2xl shadow-xl p-8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 560,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    style: {\n      color: 'white',\n      fontSize: '24px',\n      marginBottom: '20px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 561,\n      columnNumber: 9\n    }\n  }, \"Order Payment\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: '10px',\n      marginBottom: '20px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 563,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 564,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 564,\n      columnNumber: 41\n    }\n  }, \"Transaction ID:\"), \" \", payment.transactionId), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 565,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 565,\n      columnNumber: 41\n    }\n  }, \"Amount:\"), \" \\u20B9\", payment.amount), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 566,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 566,\n      columnNumber: 41\n    }\n  }, \"ArtworkId:\"), \" \", payment.artworkId)), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 569,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"p-4 border border-gray-300 rounded-md mb-4 bg-white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 570,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CardElement, {\n    options: CARD_ELEMENT_OPTIONS,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 571,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    disabled: !stripe || !elements,\n    className: \"w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded transition duration-200\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 574,\n      columnNumber: 11\n    }\n  }, \"Pay Now\")), paymentStatus && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"mt-4 text-center text-green-400 font-semibold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 584,\n      columnNumber: 11\n    }\n  }, paymentStatus), paymentStatus === 'Payment successful!' && (payment === null || payment === void 0 ? void 0 : payment.downloadUrl) && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: '24px',\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 588,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: payment.downloadUrl,\n    download: true,\n    style: {\n      display: 'inline-block',\n      backgroundColor: '#16a34a',\n      color: '#fff',\n      fontWeight: 'bold',\n      padding: '10px 24px',\n      borderRadius: '8px',\n      textDecoration: 'none',\n      transition: 'background-color 0.2s ease-in-out'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 589,\n      columnNumber: 13\n    }\n  }, \"Download Artwork\"))));\n};\nexport default OrderDetails;","map":{"version":3,"names":["React","useState","useEffect","useParams","useStripe","useElements","CardElement","axios","CARD_ELEMENT_OPTIONS","style","base","fontSize","color","invalid","OrderDetails","orderId","stripe","elements","payment","setPayment","clientSecret","setClientSecret","loading","setLoading","paymentStatus","setPaymentStatus","error","setError","token","localStorage","getItem","fetchPaymentIntentAndDetails","intentRes","paymentRes","Promise","all","post","Number","headers","Authorization","get","data","err","_err$response","console","response","status","handleSubmit","e","preventDefault","result","confirmCardPayment","payment_method","card","getElement","message","paymentIntent","mappedStatus","transactionId","id","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","padding","backgroundImage","backgroundSize","backgroundRepeat","backgroundPosition","backgroundAttachment","minHeight","width","overflowX","marginBottom","amount","artworkId","onSubmit","options","type","disabled","downloadUrl","marginTop","textAlign","href","download","display","backgroundColor","fontWeight","borderRadius","textDecoration","transition"],"sources":["C:/Users/Pallavi/Desktop/React/firstapp/src/components/userboard/OrderDetails.js"],"sourcesContent":["\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n// import { useStripe, useElements, CardElement } from '@stripe/react-stripe-js';\r\n// import axios from 'axios';\r\n\r\n// const CARD_ELEMENT_OPTIONS = {\r\n//   style: {\r\n//     base: {\r\n//       fontSize: '16px',\r\n//       color: '#32325d',\r\n//       '::placeholder': {\r\n//         color: '#a0aec0',\r\n//       },\r\n//     },\r\n//     invalid: {\r\n//       color: '#e53e3e',\r\n//     },\r\n//   },\r\n// };\r\n\r\n// const OrderDetails = () => {\r\n//   const { orderId } = useParams();\r\n//   const numericOrderId = Number(orderId);\r\n//   const stripe = useStripe();\r\n//   const elements = useElements();\r\n\r\n//   const [payment, setPayment] = useState(null);\r\n//   const [clientSecret, setClientSecret] = useState('');\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [paymentStatus, setPaymentStatus] = useState('');\r\n//   const [error, setError] = useState('');\r\n//   const token = localStorage.getItem('token');\r\n\r\n//   useEffect(() => {\r\n//     const fetchPaymentIntentAndDetails = async () => {\r\n//       try {\r\n//         const intentRes = await axios.post(\r\n//           'http://localhost:8080/api/payments/create-payment-intent',\r\n//           { orderId: numericOrderId },\r\n//           { headers: { Authorization: `Bearer ${token}` } }\r\n//         );\r\n\r\n//         setClientSecret(intentRes.data.clientSecret);\r\n\r\n//         const paymentRes = await axios.get(\r\n//           `http://localhost:8080/api/payments/${orderId}`,\r\n//           { headers: { Authorization: `Bearer ${token}` } }\r\n//         );\r\n\r\n//         setPayment(paymentRes.data);\r\n//         setLoading(false);\r\n//       } catch (err) {\r\n//         console.error('Error during payment setup:', err);\r\n//         setError(\r\n//           err.response?.status === 403\r\n//             ? 'You are not authorized to view this order.'\r\n//             : 'Something went wrong. Please try again later.'\r\n//         );\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchPaymentIntentAndDetails();\r\n//   }, [orderId, token]);\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     if (!stripe || !elements) return;\r\n\r\n//     const result = await stripe.confirmCardPayment(clientSecret, {\r\n//       payment_method: {\r\n//         card: elements.getElement(CardElement),\r\n//       },\r\n//     });\r\n\r\n//     if (result.error) {\r\n//       setError(result.error.message);\r\n//     } else {\r\n//       const status = result.paymentIntent.status;\r\n//       const mappedStatus =\r\n//         status === 'succeeded'\r\n//           ? 'COMPLETED'\r\n//           : status === 'processing'\r\n//           ? 'PENDING'\r\n//           : 'FAILED';\r\n\r\n//       try {\r\n//         await axios.post(\r\n//           'http://localhost:8080/api/payments/confirm',\r\n//           {\r\n//             transactionId: result.paymentIntent.id,\r\n//             status: mappedStatus,\r\n//           },\r\n//           { headers: { Authorization: `Bearer ${token}` } }\r\n//         );\r\n\r\n//         setPaymentStatus(\r\n//           mappedStatus === 'COMPLETED'\r\n//             ? 'Payment successful!'\r\n//             : 'Payment submitted but not completed.'\r\n//         );\r\n//       } catch (err) {\r\n//         console.error('Error confirming payment:', err);\r\n//         setError('Failed to confirm payment to server.');\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   if (loading) return <p className=\"text-center text-white mt-10\">Loading...</p>;\r\n//   if (error) return <p className=\"text-center text-red-500 mt-10\">{error}</p>;\r\n\r\n//   return (\r\n//     <div\r\n//       className=\"flex justify-center items-center min-h-screen w-full px-4\"\r\n//       style={{\r\n//         padding: \"20px\",\r\n//         backgroundImage: `url(\"/artist.png\")`,\r\n//         backgroundSize: \"100% 100%\",\r\n//         backgroundRepeat: \"no-repeat\",\r\n//         backgroundPosition: \"center\",\r\n//         backgroundAttachment: \"fixed\",\r\n//         minHeight: \"100vh\",\r\n//         width: \"100vw\",\r\n//         overflowX: \"hidden\",\r\n//       }}\r\n//     >\r\n//       <div className=\"w-full max-w-md bg-black bg-opacity-70 rounded-2xl shadow-xl p-8\">\r\n//         <h2 style={{ color: 'white', fontSize: '24px', marginBottom: '20px' }}>Order Payment</h2>\r\n  \r\n//         <div style={{ padding: '10px', marginBottom: '20px' }}>\r\n//           <p style={{ color: 'white' }}>\r\n//             <strong>Transaction ID:</strong> {payment.transactionId}\r\n//           </p>\r\n//           <p style={{ color: 'white' }}>\r\n//             <strong>Amount:</strong> â‚¹{payment.amount}\r\n//           </p>\r\n//           <p style={{ color: 'white' }}>\r\n//             <strong>ArtworkId:</strong> {payment.artworkId}\r\n//           </p>\r\n//         </div>\r\n  \r\n//         <form onSubmit={handleSubmit}>\r\n//           <div className=\"p-4 border border-gray-300 rounded-md mb-4 bg-white\">\r\n//             <CardElement options={CARD_ELEMENT_OPTIONS} />\r\n//           </div>\r\n  \r\n//           <button\r\n//             type=\"submit\"\r\n//             disabled={!stripe || !elements}\r\n//             className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded transition duration-200\"\r\n//           >\r\n//             Pay Now\r\n//           </button>\r\n//         </form>\r\n  \r\n//         {paymentStatus && (\r\n//           <p className=\"mt-4 text-center text-green-400 font-semibold\">{paymentStatus}</p>\r\n//         )}\r\n  \r\n//         {paymentStatus === 'Payment successful!' && payment?.downloadUrl && (\r\n//           <div style={{ marginTop: '24px', textAlign: 'center' }}>\r\n//           <a\r\n//             href={payment.downloadUrl}\r\n//             download\r\n//             style={{\r\n//               display: 'inline-block',\r\n//               backgroundColor: '#16a34a',\r\n//               color: '#fff',\r\n//               fontWeight: 'bold',\r\n//               padding: '10px 24px',\r\n//               borderRadius: '8px',\r\n//               textDecoration: 'none',\r\n//               transition: 'background-color 0.2s ease-in-out'\r\n//             }}\r\n            \r\n//           >\r\n//             Download Artwork\r\n//           </a>\r\n//         </div>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default OrderDetails;\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n// import { useStripe, useElements, CardElement } from '@stripe/react-stripe-js';\r\n// import axios from 'axios';\r\n\r\n// const CARD_ELEMENT_OPTIONS = {\r\n//   style: {\r\n//     base: {\r\n//       fontSize: '16px',\r\n//       color: '#32325d',\r\n//       '::placeholder': { color: '#a0aec0' },\r\n//     },\r\n//     invalid: { color: '#e53e3e' },\r\n//   },\r\n// };\r\n\r\n// const OrderDetails = () => {\r\n//   const { orderId } = useParams();\r\n//   const numericOrderId = Number(orderId);\r\n//   const stripe = useStripe();\r\n//   const elements = useElements();\r\n\r\n//   const [payment, setPayment] = useState(null);\r\n//   const [clientSecret, setClientSecret] = useState('');\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [paymentStatus, setPaymentStatus] = useState('');\r\n//   const [error, setError] = useState('');\r\n//   const [downloadUrl, setDownloadUrl] = useState('');\r\n//   const token = localStorage.getItem('token');\r\n\r\n//   useEffect(() => {\r\n//     const fetchPaymentDetails = async () => {\r\n//       try {\r\n//         const intentRes = await axios.post(\r\n//           'http://localhost:8080/api/payments/create-payment-intent',\r\n//           { orderId: numericOrderId },\r\n//           { headers: { Authorization: `Bearer ${token}` } }\r\n//         );\r\n//         setClientSecret(intentRes.data.clientSecret);\r\n\r\n//         const paymentRes = await axios.get(\r\n//           `http://localhost:8080/api/payments/${orderId}`,\r\n//           { headers: { Authorization: `Bearer ${token}` } }\r\n//         );\r\n\r\n//         setPayment(paymentRes.data);\r\n//         setLoading(false);\r\n//       } catch (err) {\r\n//         console.error('Error fetching payment details:', err);\r\n//         setError(\r\n//           err.response?.status === 403\r\n//             ? 'You are not authorized to view this order.'\r\n//             : 'Something went wrong. Please try again.'\r\n//         );\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchPaymentDetails();\r\n//   }, [orderId, token, numericOrderId]);\r\n\r\n//   const fetchDownloadUrl = async (artworkId) => {\r\n//     try {\r\n//       const res = await axios.get(\r\n//         `http://localhost:8080/api/artworks/download/${artworkId}`,\r\n//         { headers: { Authorization: `Bearer ${token}` } }\r\n//       );\r\n//       console.log('Received download URL:', res.data.downloadUrl);\r\n\r\n//       if (res.data.downloadUrl) {\r\n//         setDownloadUrl(res.data.downloadUrl);\r\n//       } else {\r\n//         console.warn('No download URL found in response');\r\n//         setError('Download URL not received.');\r\n//       }\r\n//     } catch (err) {\r\n//       console.error('Error fetching download URL:', err);\r\n//       setError('Failed to fetch download link.');\r\n//     }\r\n//   };\r\n\r\n//   const refreshPaymentDetails = async () => {\r\n//     try {\r\n//       const res = await axios.get(\r\n//         `http://localhost:8080/api/payments/${orderId}`,\r\n//         { headers: { Authorization: `Bearer ${token}` } }\r\n//       );\r\n//       return res.data;\r\n//     } catch (err) {\r\n//       console.error('Error refreshing payment details:', err);\r\n//       return null;\r\n//     }\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     if (!stripe || !elements) return;\r\n\r\n//     try {\r\n//       const result = await stripe.confirmCardPayment(clientSecret, {\r\n//         payment_method: { card: elements.getElement(CardElement) },\r\n//       });\r\n\r\n//       if (result.error) {\r\n//         setError(result.error.message);\r\n//       } else {\r\n//         const status = result.paymentIntent.status;\r\n//         const mappedStatus =\r\n//           status === 'succeeded'\r\n//             ? 'COMPLETED'\r\n//             : status === 'processing'\r\n//             ? 'PENDING'\r\n//             : 'FAILED';\r\n\r\n//         await axios.post(\r\n//           'http://localhost:8080/api/payments/confirm',\r\n//           {\r\n//             transactionId: result.paymentIntent.id,\r\n//             status: mappedStatus,\r\n//           },\r\n//           { headers: { Authorization: `Bearer ${token}` } }\r\n//         );\r\n\r\n//         setPaymentStatus(\r\n//           mappedStatus === 'COMPLETED'\r\n//             ? 'Payment successful!'\r\n//             : 'Payment submitted but not completed.'\r\n//         );\r\n\r\n//         if (mappedStatus === 'COMPLETED') {\r\n//           console.log(\"Refreshing payment details after confirmation...\");\r\n//           const updatedPayment = await refreshPaymentDetails();\r\n//           setPayment(updatedPayment);\r\n\r\n//           if (updatedPayment?.artworkId) {\r\n//             console.log(\"Trying to fetch artwork download URL with ID:\", updatedPayment.artworkId);\r\n//             fetchDownloadUrl(updatedPayment.artworkId);\r\n//           } else {\r\n//             console.warn(\"No artworkId found in updated payment data\");\r\n//           }\r\n//         }\r\n//       }\r\n//     } catch (err) {\r\n//       console.error('Error confirming payment:', err);\r\n//       setError('Failed to confirm payment on the server.');\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div\r\n//       style={{\r\n//         padding: \"20px\",\r\n//         backgroundImage: `url(\"/artist.png\")`,\r\n//         backgroundSize: \"cover\",\r\n//         backgroundAttachment: \"fixed\",\r\n//         minHeight: \"100vh\",\r\n//         width: \"100vw\",\r\n//         display: \"flex\",\r\n//         justifyContent: \"center\",\r\n//         alignItems: \"center\",\r\n//       }}\r\n//     >\r\n//       <div style={{\r\n//         width: '100%',\r\n//         maxWidth: '500px',\r\n//         background: 'rgba(0, 0, 0, 0.75)',\r\n//         padding: '30px',\r\n//         borderRadius: '12px',\r\n//         color: 'white',\r\n//       }}>\r\n//         <h2>Order Payment</h2>\r\n\r\n//         {loading ? (\r\n//           <p style={{ color: 'white' }}>Loading...</p>\r\n//         ) : (\r\n//           <>\r\n//             <p><strong>Transaction ID:</strong> {payment?.transactionId}</p>\r\n//             <p><strong>Amount:</strong> â‚¹{payment?.amount}</p>\r\n\r\n//             <form onSubmit={handleSubmit}>\r\n//               <div style={{\r\n//                 padding: '12px',\r\n//                 border: '1px solid #ccc',\r\n//                 borderRadius: '8px',\r\n//                 marginBottom: '15px',\r\n//                 background: 'white'\r\n//               }}>\r\n//                 <CardElement options={CARD_ELEMENT_OPTIONS} />\r\n//               </div>\r\n//               <button\r\n//                 type=\"submit\"\r\n//                 disabled={!stripe || !elements}\r\n//                 style={{\r\n//                   width: '100%',\r\n//                   backgroundColor: '#007bff',\r\n//                   color: 'white',\r\n//                   padding: '10px 16px',\r\n//                   border: 'none',\r\n//                   borderRadius: '6px',\r\n//                   cursor: 'pointer',\r\n//                   fontWeight: 'bold',\r\n//                   fontSize: '16px',\r\n//                 }}\r\n//               >\r\n//                 Pay Now\r\n//               </button>\r\n//             </form>\r\n\r\n//             {paymentStatus && (\r\n//               <p style={{ marginTop: '20px', textAlign: 'center', color: 'lightgreen', fontWeight: 'bold' }}>\r\n//                 {paymentStatus}\r\n//               </p>\r\n//             )}\r\n\r\n//             {error && (\r\n//               <p style={{ marginTop: '10px', color: 'red', textAlign: 'center' }}>{error}</p>\r\n//             )}\r\n\r\n//             {paymentStatus === 'Payment successful!' && downloadUrl && (\r\n//               <div style={{ marginTop: '20px', textAlign: 'center' }}>\r\n//                 <a\r\n//                   href={downloadUrl}\r\n//                   download\r\n//                   style={{\r\n//                     display: 'inline-block',\r\n//                     backgroundColor: '#28a745',\r\n//                     color: 'white',\r\n//                     padding: '10px 16px',\r\n//                     borderRadius: '6px',\r\n//                     textDecoration: 'none',\r\n//                     fontWeight: 'bold',\r\n//                   }}\r\n//                 >\r\n//                   Download Artwork\r\n//                 </a>\r\n//               </div>\r\n//             )}\r\n//           </>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default OrderDetails;\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useStripe, useElements, CardElement } from '@stripe/react-stripe-js';\r\nimport axios from 'axios';\r\n\r\nconst CARD_ELEMENT_OPTIONS = {\r\n  style: {\r\n    base: {\r\n      fontSize: '16px',\r\n      color: '#32325d',\r\n      '::placeholder': {\r\n        color: '#a0aec0',\r\n      },\r\n    },\r\n    invalid: {\r\n      color: '#e53e3e',\r\n    },\r\n  },\r\n};\r\n\r\nconst OrderDetails = () => {\r\n  const { orderId } = useParams();\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n\r\n  const [payment, setPayment] = useState(null);\r\n  const [clientSecret, setClientSecret] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [paymentStatus, setPaymentStatus] = useState('');\r\n  const [error, setError] = useState('');\r\n\r\n  const token = localStorage.getItem('token');\r\n\r\n  useEffect(() => {\r\n    const fetchPaymentIntentAndDetails = async () => {\r\n      if (!token) {\r\n        setError('Authentication token missing. Please login again.');\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const [intentRes, paymentRes] = await Promise.all([\r\n          axios.post(\r\n            'http://localhost:8080/api/payments/create-payment-intent',\r\n            { orderId: Number(orderId) },\r\n            { headers: { Authorization: `Bearer ${token}` } }\r\n          ),\r\n          axios.get(\r\n            `http://localhost:8080/api/payments/${orderId}`,\r\n            { headers: { Authorization: `Bearer ${token}` } }\r\n          ),\r\n        ]);\r\n\r\n        setClientSecret(intentRes.data.clientSecret);\r\n        setPayment(paymentRes.data);\r\n        setLoading(false);\r\n      } catch (err) {\r\n        console.error('Error fetching payment details:', err);\r\n\r\n        if (err.response?.status === 403) {\r\n          setError('You are not authorized to view this order. Please check if you have permission.');\r\n        } else {\r\n          setError('Something went wrong. Please try again later.');\r\n        }\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchPaymentIntentAndDetails();\r\n  }, [orderId, token]);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!stripe || !elements) return;\r\n\r\n    try {\r\n      const result = await stripe.confirmCardPayment(clientSecret, {\r\n        payment_method: {\r\n          card: elements.getElement(CardElement),\r\n        },\r\n      });\r\n\r\n      if (result.error) {\r\n        setError(result.error.message);\r\n      } else {\r\n        const status = result.paymentIntent.status;\r\n        const mappedStatus = status === 'succeeded' ? 'COMPLETED' :\r\n                              status === 'processing' ? 'PENDING' : 'FAILED';\r\n\r\n        await axios.post(\r\n          'http://localhost:8080/api/payments/confirm',\r\n          {\r\n            transactionId: result.paymentIntent.id,\r\n            status: mappedStatus,\r\n          },\r\n          { headers: { Authorization: `Bearer ${token}` } }\r\n        );\r\n\r\n        setPaymentStatus(\r\n          mappedStatus === 'COMPLETED'\r\n            ? 'Payment successful!'\r\n            : 'Payment submitted but not completed.'\r\n        );\r\n      }\r\n    } catch (err) {\r\n      console.error('Payment submission error:', err);\r\n      setError('Payment failed. Please try again.');\r\n    }\r\n  };\r\n\r\n  if (loading) return <p className=\"text-center text-white mt-10\">Loading...</p>;\r\n  if (error) return <p className=\"text-center text-red-500 mt-10\">{error}</p>;\r\n\r\n  return (\r\n    <div className=\"flex justify-center items-center min-h-screen w-full px-4\" \r\n         style={{\r\n           padding: \"20px\",\r\n           backgroundImage: `url(\"/artist.png\")`,\r\n           backgroundSize: \"100% 100%\",\r\n           backgroundRepeat: \"no-repeat\",\r\n           backgroundPosition: \"center\",\r\n           backgroundAttachment: \"fixed\",\r\n           minHeight: \"100vh\",\r\n           width: \"100vw\",\r\n           overflowX: \"hidden\",\r\n         }}>\r\n      <div className=\"w-full max-w-md bg-black bg-opacity-70 rounded-2xl shadow-xl p-8\">\r\n        <h2 style={{ color: 'white', fontSize: '24px', marginBottom: '20px' }}>Order Payment</h2>\r\n\r\n        <div style={{ padding: '10px', marginBottom: '20px' }}>\r\n          <p style={{ color: 'white' }}><strong>Transaction ID:</strong> {payment.transactionId}</p>\r\n          <p style={{ color: 'white' }}><strong>Amount:</strong> â‚¹{payment.amount}</p>\r\n          <p style={{ color: 'white' }}><strong>ArtworkId:</strong> {payment.artworkId}</p>\r\n        </div>\r\n\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"p-4 border border-gray-300 rounded-md mb-4 bg-white\">\r\n            <CardElement options={CARD_ELEMENT_OPTIONS} />\r\n          </div>\r\n\r\n          <button\r\n            type=\"submit\"\r\n            disabled={!stripe || !elements}\r\n            className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded transition duration-200\"\r\n          >\r\n            Pay Now\r\n          </button>\r\n        </form>\r\n\r\n        {paymentStatus && (\r\n          <p className=\"mt-4 text-center text-green-400 font-semibold\">{paymentStatus}</p>\r\n        )}\r\n\r\n        {paymentStatus === 'Payment successful!' && payment?.downloadUrl && (\r\n          <div style={{ marginTop: '24px', textAlign: 'center' }}>\r\n            <a\r\n              href={payment.downloadUrl}\r\n              download\r\n              style={{\r\n                display: 'inline-block',\r\n                backgroundColor: '#16a34a',\r\n                color: '#fff',\r\n                fontWeight: 'bold',\r\n                padding: '10px 24px',\r\n                borderRadius: '8px',\r\n                textDecoration: 'none',\r\n                transition: 'background-color 0.2s ease-in-out'\r\n              }}\r\n            >\r\n              Download Artwork\r\n            </a>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OrderDetails;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module"}