{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pallavi\\\\Desktop\\\\React\\\\firstapp\\\\src\\\\components\\\\auth\\\\Login.js\";\n// import React, { useState } from \"react\";\n// import { \n//   Dialog, DialogTitle, DialogContent, DialogActions, Button, TextField, IconButton, Snackbar, Alert \n// } from \"@mui/material\";\n// import CloseIcon from \"@mui/icons-material/Close\";\n// import axios from \"axios\";\n// import { useHistory } from \"react-router-dom\";  // ‚úÖ Correct for React Router v5\n\n// const Login = ({ open = false, onClose = () => {}, onLogin = () => {} }) => { \n//   const history = useHistory();  // ‚úÖ Correct usage\n//   const [formData, setFormData] = useState({ username: \"\", password: \"\" });\n//   const [message, setMessage] = useState({ text: \"\", type: \"error\" });\n//   const [snackbarOpen, setSnackbarOpen] = useState(false);\n\n//   const handleChange = (e) => {\n//     setFormData({ ...formData, [e.target.name]: e.target.value });\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     console.log(\"üîµ Sending Data:\", formData);\n\n//     try {\n//       const response = await axios.post(\"http://localhost:8080/api/users/login\", formData, {\n//         headers: { \"Content-Type\": \"application/json\" },\n//         withCredentials: true,\n//       });\n\n//       console.log(\"üü¢ Full Response:\", response);\n//       console.log(\"üü¢ Response Data:\", JSON.stringify(response.data, null, 2)); // ‚úÖ Log full response data\n\n//       const { token, role } = response.data; // ‚úÖ Extract token & role\n\n//       // ‚úÖ Only check for `role` if it's present in API response\n//       if (token) {  \n//         localStorage.setItem(\"token\", token);\n//         localStorage.setItem(\"username\", formData.username);\n\n//         if (role) {\n//           localStorage.setItem(\"role\", role);\n//         }\n\n//         onLogin(token);\n//         setMessage({ text: \"‚úÖ Login successful! Redirecting...\", type: \"success\" });\n//         setSnackbarOpen(true);\n\n//         setTimeout(() => {\n//           history.push(role?.toLowerCase() === \"artist\" ? \"/artist-dashboard\" : \"/dashboard\");\n\n//         }, 1500);\n//       } else {\n//         console.error(\"‚ùå API did not return token. Response Data:\", response.data);\n//         setMessage({ text: \"‚ùå Login failed. No token received.\", type: \"error\" });\n//         setSnackbarOpen(true);\n//       }\n//     } catch (error) {\n//       console.error(\"üî¥ Full API Error:\", error);\n\n//       if (error.response) {\n//         console.log(\"üî¥ Error Response Data:\", error.response.data);\n//         setMessage({ text: error.response.data?.message || \"‚ùå Invalid username or password\", type: \"error\" });\n//       } else if (error.request) {\n//         setMessage({ text: \"‚ö†Ô∏è Server not responding. Try again later.\", type: \"error\" });\n//       } else {\n//         setMessage({ text: \"‚ùå Request failed. Check network.\", type: \"error\" });\n//       }\n//       setSnackbarOpen(true);\n//     }\n//   };\n\n//   // ‚úÖ Handle Logout Function (Fixing 'handleLogout' not defined error)\n//   // const handleLogout = () => {\n//   //   localStorage.removeItem(\"token\");\n//   //   localStorage.removeItem(\"role\");\n//   //   localStorage.removeItem(\"username\");\n//   //   history.push(\"/login\");\n//   // };\n\n//   return (\n//     <Dialog open={open} onClose={onClose}>\n//       <DialogTitle>\n//         Login\n//         <IconButton\n//           aria-label=\"close\"\n//           onClick={onClose}\n//           sx={{ position: \"absolute\", right: 8, top: 8 }}\n//         >\n//           <CloseIcon />\n//         </IconButton>\n//       </DialogTitle>\n//       <DialogContent>\n//         <TextField \n//           label=\"Username\" \n//           name=\"username\" \n//           type=\"text\" \n//           fullWidth \n//           margin=\"dense\" \n//           value={formData.username} \n//           onChange={handleChange} \n//           required\n//         />\n//         <TextField \n//           label=\"Password\" \n//           name=\"password\" \n//           type=\"password\" \n//           fullWidth \n//           margin=\"dense\" \n//           value={formData.password} \n//           onChange={handleChange} \n//           required\n//         />\n//       </DialogContent>\n//       <DialogActions>\n//         <Button onClick={onClose} color=\"secondary\">Cancel</Button>\n//         <Button onClick={handleSubmit} color=\"primary\" variant=\"contained\">Login</Button>\n//       </DialogActions>\n\n//       {/* Snackbar for Feedback */}\n//       <Snackbar open={snackbarOpen} autoHideDuration={3000} onClose={() => setSnackbarOpen(false)}>\n//         <Alert onClose={() => setSnackbarOpen(false)} severity={message.type} sx={{ width: '100%' }}>\n//           {message.text}\n//         </Alert>\n//       </Snackbar>\n//     </Dialog>\n//   );\n// };\n\n// export default Login;\n// import React, { useState } from \"react\";\n// import { \n//   Dialog, DialogTitle, DialogContent, DialogActions, Button, TextField, IconButton, Snackbar, Alert \n// } from \"@mui/material\";\n// import CloseIcon from \"@mui/icons-material/Close\";\n// import axios from \"axios\";\n// import { useHistory } from \"react-router-dom\";  // ‚úÖ Correct for React Router v5\n\n// const Login = ({ open = false, onClose = () => {}, onLogin = () => {} }) => { \n//   const history = useHistory();  // ‚úÖ Correct usage\n//   const [formData, setFormData] = useState({ username: \"\", password: \"\" });\n//   const [message, setMessage] = useState({ text: \"\", type: \"error\" });\n//   const [snackbarOpen, setSnackbarOpen] = useState(false);\n\n//   const handleChange = (e) => {\n//     setFormData({ ...formData, [e.target.name]: e.target.value });\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     console.log(\"üîµ Sending Data:\", formData);\n\n//     try {\n//       const response = await axios.post(\"http://localhost:8080/api/users/login\", formData, {\n//         headers: { \"Content-Type\": \"application/json\" },\n//         withCredentials: true,\n//       });\n\n//       console.log(\"üü¢ Full Response:\", response);\n//       console.log(\"üü¢ Response Data:\", JSON.stringify(response.data, null, 2)); // ‚úÖ Log full response data\n\n//       const { token, role } = response.data; // ‚úÖ Extract token & role\n\n//       if (token) {  \n//         localStorage.setItem(\"token\", token);\n//         localStorage.setItem(\"username\", formData.username);\n\n//         if (role) {\n//           localStorage.setItem(\"role\", role);\n//         }\n\n//         console.log(\"üîÄ Redirecting based on role:\", role);\n\n//         onLogin(token);\n//         setMessage({ text: \"‚úÖ Login successful! Redirecting...\", type: \"success\" });\n//         setSnackbarOpen(true);\n\n//         setTimeout(() => {\n//           if (role && role.toLowerCase() === \"artist\") {\n//             console.log(\"üé® Redirecting to /artist-dashboard\");\n//             history.push(\"/artist-dashboard\");\n//           } else {\n//             console.log(\"üè† Redirecting to /dashboard\");\n//             history.push(\"/dashboard\");\n//           }\n//         }, 1500);\n//       } else {\n//         console.error(\"‚ùå API did not return token. Response Data:\", response.data);\n//         setMessage({ text: \"‚ùå Login failed. No token received.\", type: \"error\" });\n//         setSnackbarOpen(true);\n//       }\n//     } catch (error) {\n//       console.error(\"üî¥ Full API Error:\", error);\n\n//       if (error.response) {\n//         console.log(\"üî¥ Error Response Data:\", error.response.data);\n//         setMessage({ text: error.response.data?.message || \"‚ùå Invalid username or password\", type: \"error\" });\n//       } else if (error.request) {\n//         setMessage({ text: \"‚ö†Ô∏è Server not responding. Try again later.\", type: \"error\" });\n//       } else {\n//         setMessage({ text: \"‚ùå Request failed. Check network.\", type: \"error\" });\n//       }\n//       setSnackbarOpen(true);\n//     }\n//   };\n\n//   return (\n//     <Dialog open={open} onClose={onClose}>\n//       <DialogTitle>\n//         Login\n//         <IconButton\n//           aria-label=\"close\"\n//           onClick={onClose}\n//           sx={{ position: \"absolute\", right: 8, top: 8 }}\n//         >\n//           <CloseIcon />\n//         </IconButton>\n//       </DialogTitle>\n//       <DialogContent>\n//         <TextField \n//           label=\"Username\" \n//           name=\"username\" \n//           type=\"text\" \n//           fullWidth \n//           margin=\"dense\" \n//           value={formData.username} \n//           onChange={handleChange} \n//           required\n//         />\n//         <TextField \n//           label=\"Password\" \n//           name=\"password\" \n//           type=\"password\" \n//           fullWidth \n//           margin=\"dense\" \n//           value={formData.password} \n//           onChange={handleChange} \n//           required\n//         />\n//       </DialogContent>\n//       <DialogActions>\n//         <Button onClick={onClose} color=\"secondary\">Cancel</Button>\n//         <Button onClick={handleSubmit} color=\"primary\" variant=\"contained\">Login</Button>\n//       </DialogActions>\n\n//       {/* Snackbar for Feedback */}\n//       <Snackbar open={snackbarOpen} autoHideDuration={3000} onClose={() => setSnackbarOpen(false)}>\n//         <Alert onClose={() => setSnackbarOpen(false)} severity={message.type} sx={{ width: '100%' }}>\n//           {message.text}\n//         </Alert>\n//       </Snackbar>\n//     </Dialog>\n//   );\n// };\n\n// export default Login;\n// import React, { useState } from \"react\";\n// import { \n//   Dialog, DialogTitle, DialogContent, DialogActions, Button, TextField, IconButton, Snackbar, Alert \n// } from \"@mui/material\";\n// import CloseIcon from \"@mui/icons-material/Close\";\n// import axios from \"axios\";\n// import { useHistory } from \"react-router-dom\";  // ‚úÖ React Router v5\n\n// const Login = ({ open = false, onClose = () => {}, onLogin = () => {} }) => { \n//   const history = useHistory();  \n//   const [formData, setFormData] = useState({ username: \"\", password: \"\" });\n//   const [message, setMessage] = useState({ text: \"\", type: \"error\" });\n//   const [snackbarOpen, setSnackbarOpen] = useState(false);\n\n//   const handleChange = (e) => {\n//     setFormData({ ...formData, [e.target.name]: e.target.value });\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     console.log(\"üîµ Sending Data:\", formData);\n\n//     try {\n//       const response = await axios.post(\"http://localhost:8080/api/users/login\", formData, {\n//         headers: { \"Content-Type\": \"application/json\" },\n//         withCredentials: true,\n//       });\n\n//       console.log(\"üü¢ Full Response:\", response);\n//       console.log(\"üü¢ Response Data:\", JSON.stringify(response.data, null, 2));\n\n//       const { token, role } = response.data;\n\n//       if (token) {\n//         localStorage.setItem(\"token\", token);\n//         localStorage.setItem(\"username\", formData.username);\n//         if (role) {\n//           localStorage.setItem(\"role\", role);\n//         }\n\n//         console.log(\"üîÄ Redirecting based on role:\", role);\n//         onLogin(token);\n//         setMessage({ text: \"‚úÖ Login successful! Redirecting...\", type: \"success\" });\n//         setSnackbarOpen(true);\n\n//         setTimeout(() => {\n//           onClose();  // ‚úÖ Close the login dialog\n//           if (role && role.toLowerCase() === \"artist\") {\n//             console.log(\"üé® Redirecting to /artist-dashboard\");\n//             history.push(\"/artist-dashboard\");\n//           } else {\n//             console.log(\"üè† Redirecting to /dashboard\");\n//             history.push(\"/dashboard\");\n//           }\n//         }, 1500);\n//       } else {\n//         console.error(\"‚ùå API did not return token. Response Data:\", response.data);\n//         setMessage({ text: \"‚ùå Login failed. No token received.\", type: \"error\" });\n//         setSnackbarOpen(true);\n//       }\n//     } catch (error) {\n//       console.error(\"üî¥ Full API Error:\", error);\n\n//       if (error.response) {\n//         console.log(\"üî¥ Error Response Data:\", error.response.data);\n//         setMessage({ text: error.response.data?.message || \"‚ùå Invalid username or password\", type: \"error\" });\n//       } else if (error.request) {\n//         setMessage({ text: \"‚ö†Ô∏è Server not responding. Try again later.\", type: \"error\" });\n//       } else {\n//         setMessage({ text: \"‚ùå Request failed. Check network.\", type: \"error\" });\n//       }\n//       setSnackbarOpen(true);\n//     }\n//   };\n\n//   return (\n//     <Dialog open={open} onClose={onClose}>\n//       <DialogTitle>\n//         Login\n//         <IconButton\n//           aria-label=\"close\"\n//           onClick={onClose}\n//           sx={{ position: \"absolute\", right: 8, top: 8 }}\n//         >\n//           <CloseIcon />\n//         </IconButton>\n//       </DialogTitle>\n//       <DialogContent>\n//         <TextField \n//           label=\"Username\" \n//           name=\"username\" \n//           type=\"text\" \n//           fullWidth \n//           margin=\"dense\" \n//           value={formData.username} \n//           onChange={handleChange} \n//           required\n//         />\n//         <TextField \n//           label=\"Password\" \n//           name=\"password\" \n//           type=\"password\" \n//           fullWidth \n//           margin=\"dense\" \n//           value={formData.password} \n//           onChange={handleChange} \n//           required\n//         />\n//       </DialogContent>\n//       <DialogActions>\n//         <Button onClick={onClose} color=\"secondary\">Cancel</Button>\n//         <Button onClick={handleSubmit} color=\"primary\" variant=\"contained\">Login</Button>\n//       </DialogActions>\n\n//       {/* Snackbar for Feedback */}\n//       <Snackbar open={snackbarOpen} autoHideDuration={3000} onClose={() => setSnackbarOpen(false)}>\n//         <Alert onClose={() => setSnackbarOpen(false)} severity={message.type} sx={{ width: '100%' }}>\n//           {message.text}\n//         </Alert>\n//       </Snackbar>\n//     </Dialog>\n//   );\n// };\n\n// export default Login;\n\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nfunction Login() {\n  const history = useHistory(); // ‚úÖ Initialize history\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const handleLogin = async e => {\n    e.preventDefault();\n\n    // Simulating API response (Replace with actual API call)\n    const responseData = {\n      role: \"ARTIST\",\n      // ‚úÖ Mock response, replace with actual response from backend\n      token: \"your-jwt-token\"\n    };\n    if (responseData) {\n      localStorage.setItem(\"role\", responseData.role.toLowerCase()); // ‚úÖ Store in lowercase\n      localStorage.setItem(\"token\", responseData.token);\n      console.log(\"üîÄ Redirecting based on role:\", responseData.role);\n      if (responseData.role.toLowerCase() === \"artist\") {\n        history.push(\"/artist-dashboard\"); // ‚úÖ Redirect using useHistory()\n      } else {\n        history.push(\"/dashboard\"); // Redirect to default user dashboard\n      }\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 7\n    }\n  }, \"Login\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleLogin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Email\",\n    value: email,\n    onChange: e => setEmail(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"password\",\n    placeholder: \"Password\",\n    value: password,\n    onChange: e => setPassword(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 9\n    }\n  }, \"Login\")));\n}\nexport default Login;","map":{"version":3,"names":["React","useState","useHistory","Login","history","email","setEmail","password","setPassword","handleLogin","e","preventDefault","responseData","role","token","localStorage","setItem","toLowerCase","console","log","push","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target"],"sources":["C:/Users/Pallavi/Desktop/React/firstapp/src/components/auth/Login.js"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import { \r\n//   Dialog, DialogTitle, DialogContent, DialogActions, Button, TextField, IconButton, Snackbar, Alert \r\n// } from \"@mui/material\";\r\n// import CloseIcon from \"@mui/icons-material/Close\";\r\n// import axios from \"axios\";\r\n// import { useHistory } from \"react-router-dom\";  // ‚úÖ Correct for React Router v5\r\n\r\n// const Login = ({ open = false, onClose = () => {}, onLogin = () => {} }) => { \r\n//   const history = useHistory();  // ‚úÖ Correct usage\r\n//   const [formData, setFormData] = useState({ username: \"\", password: \"\" });\r\n//   const [message, setMessage] = useState({ text: \"\", type: \"error\" });\r\n//   const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n\r\n//   const handleChange = (e) => {\r\n//     setFormData({ ...formData, [e.target.name]: e.target.value });\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     console.log(\"üîµ Sending Data:\", formData);\r\n  \r\n//     try {\r\n//       const response = await axios.post(\"http://localhost:8080/api/users/login\", formData, {\r\n//         headers: { \"Content-Type\": \"application/json\" },\r\n//         withCredentials: true,\r\n//       });\r\n  \r\n//       console.log(\"üü¢ Full Response:\", response);\r\n//       console.log(\"üü¢ Response Data:\", JSON.stringify(response.data, null, 2)); // ‚úÖ Log full response data\r\n  \r\n//       const { token, role } = response.data; // ‚úÖ Extract token & role\r\n  \r\n//       // ‚úÖ Only check for `role` if it's present in API response\r\n//       if (token) {  \r\n//         localStorage.setItem(\"token\", token);\r\n//         localStorage.setItem(\"username\", formData.username);\r\n  \r\n//         if (role) {\r\n//           localStorage.setItem(\"role\", role);\r\n//         }\r\n  \r\n//         onLogin(token);\r\n//         setMessage({ text: \"‚úÖ Login successful! Redirecting...\", type: \"success\" });\r\n//         setSnackbarOpen(true);\r\n  \r\n//         setTimeout(() => {\r\n//           history.push(role?.toLowerCase() === \"artist\" ? \"/artist-dashboard\" : \"/dashboard\");\r\n\r\n//         }, 1500);\r\n//       } else {\r\n//         console.error(\"‚ùå API did not return token. Response Data:\", response.data);\r\n//         setMessage({ text: \"‚ùå Login failed. No token received.\", type: \"error\" });\r\n//         setSnackbarOpen(true);\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"üî¥ Full API Error:\", error);\r\n  \r\n//       if (error.response) {\r\n//         console.log(\"üî¥ Error Response Data:\", error.response.data);\r\n//         setMessage({ text: error.response.data?.message || \"‚ùå Invalid username or password\", type: \"error\" });\r\n//       } else if (error.request) {\r\n//         setMessage({ text: \"‚ö†Ô∏è Server not responding. Try again later.\", type: \"error\" });\r\n//       } else {\r\n//         setMessage({ text: \"‚ùå Request failed. Check network.\", type: \"error\" });\r\n//       }\r\n//       setSnackbarOpen(true);\r\n//     }\r\n//   };\r\n  \r\n  \r\n  \r\n    \r\n//   // ‚úÖ Handle Logout Function (Fixing 'handleLogout' not defined error)\r\n//   // const handleLogout = () => {\r\n//   //   localStorage.removeItem(\"token\");\r\n//   //   localStorage.removeItem(\"role\");\r\n//   //   localStorage.removeItem(\"username\");\r\n//   //   history.push(\"/login\");\r\n//   // };\r\n\r\n//   return (\r\n//     <Dialog open={open} onClose={onClose}>\r\n//       <DialogTitle>\r\n//         Login\r\n//         <IconButton\r\n//           aria-label=\"close\"\r\n//           onClick={onClose}\r\n//           sx={{ position: \"absolute\", right: 8, top: 8 }}\r\n//         >\r\n//           <CloseIcon />\r\n//         </IconButton>\r\n//       </DialogTitle>\r\n//       <DialogContent>\r\n//         <TextField \r\n//           label=\"Username\" \r\n//           name=\"username\" \r\n//           type=\"text\" \r\n//           fullWidth \r\n//           margin=\"dense\" \r\n//           value={formData.username} \r\n//           onChange={handleChange} \r\n//           required\r\n//         />\r\n//         <TextField \r\n//           label=\"Password\" \r\n//           name=\"password\" \r\n//           type=\"password\" \r\n//           fullWidth \r\n//           margin=\"dense\" \r\n//           value={formData.password} \r\n//           onChange={handleChange} \r\n//           required\r\n//         />\r\n//       </DialogContent>\r\n//       <DialogActions>\r\n//         <Button onClick={onClose} color=\"secondary\">Cancel</Button>\r\n//         <Button onClick={handleSubmit} color=\"primary\" variant=\"contained\">Login</Button>\r\n//       </DialogActions>\r\n\r\n//       {/* Snackbar for Feedback */}\r\n//       <Snackbar open={snackbarOpen} autoHideDuration={3000} onClose={() => setSnackbarOpen(false)}>\r\n//         <Alert onClose={() => setSnackbarOpen(false)} severity={message.type} sx={{ width: '100%' }}>\r\n//           {message.text}\r\n//         </Alert>\r\n//       </Snackbar>\r\n//     </Dialog>\r\n//   );\r\n// };\r\n\r\n// export default Login;\r\n// import React, { useState } from \"react\";\r\n// import { \r\n//   Dialog, DialogTitle, DialogContent, DialogActions, Button, TextField, IconButton, Snackbar, Alert \r\n// } from \"@mui/material\";\r\n// import CloseIcon from \"@mui/icons-material/Close\";\r\n// import axios from \"axios\";\r\n// import { useHistory } from \"react-router-dom\";  // ‚úÖ Correct for React Router v5\r\n\r\n// const Login = ({ open = false, onClose = () => {}, onLogin = () => {} }) => { \r\n//   const history = useHistory();  // ‚úÖ Correct usage\r\n//   const [formData, setFormData] = useState({ username: \"\", password: \"\" });\r\n//   const [message, setMessage] = useState({ text: \"\", type: \"error\" });\r\n//   const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n\r\n//   const handleChange = (e) => {\r\n//     setFormData({ ...formData, [e.target.name]: e.target.value });\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     console.log(\"üîµ Sending Data:\", formData);\r\n  \r\n//     try {\r\n//       const response = await axios.post(\"http://localhost:8080/api/users/login\", formData, {\r\n//         headers: { \"Content-Type\": \"application/json\" },\r\n//         withCredentials: true,\r\n//       });\r\n  \r\n//       console.log(\"üü¢ Full Response:\", response);\r\n//       console.log(\"üü¢ Response Data:\", JSON.stringify(response.data, null, 2)); // ‚úÖ Log full response data\r\n  \r\n//       const { token, role } = response.data; // ‚úÖ Extract token & role\r\n  \r\n//       if (token) {  \r\n//         localStorage.setItem(\"token\", token);\r\n//         localStorage.setItem(\"username\", formData.username);\r\n  \r\n//         if (role) {\r\n//           localStorage.setItem(\"role\", role);\r\n//         }\r\n\r\n//         console.log(\"üîÄ Redirecting based on role:\", role);\r\n\r\n//         onLogin(token);\r\n//         setMessage({ text: \"‚úÖ Login successful! Redirecting...\", type: \"success\" });\r\n//         setSnackbarOpen(true);\r\n\r\n//         setTimeout(() => {\r\n//           if (role && role.toLowerCase() === \"artist\") {\r\n//             console.log(\"üé® Redirecting to /artist-dashboard\");\r\n//             history.push(\"/artist-dashboard\");\r\n//           } else {\r\n//             console.log(\"üè† Redirecting to /dashboard\");\r\n//             history.push(\"/dashboard\");\r\n//           }\r\n//         }, 1500);\r\n//       } else {\r\n//         console.error(\"‚ùå API did not return token. Response Data:\", response.data);\r\n//         setMessage({ text: \"‚ùå Login failed. No token received.\", type: \"error\" });\r\n//         setSnackbarOpen(true);\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"üî¥ Full API Error:\", error);\r\n  \r\n//       if (error.response) {\r\n//         console.log(\"üî¥ Error Response Data:\", error.response.data);\r\n//         setMessage({ text: error.response.data?.message || \"‚ùå Invalid username or password\", type: \"error\" });\r\n//       } else if (error.request) {\r\n//         setMessage({ text: \"‚ö†Ô∏è Server not responding. Try again later.\", type: \"error\" });\r\n//       } else {\r\n//         setMessage({ text: \"‚ùå Request failed. Check network.\", type: \"error\" });\r\n//       }\r\n//       setSnackbarOpen(true);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <Dialog open={open} onClose={onClose}>\r\n//       <DialogTitle>\r\n//         Login\r\n//         <IconButton\r\n//           aria-label=\"close\"\r\n//           onClick={onClose}\r\n//           sx={{ position: \"absolute\", right: 8, top: 8 }}\r\n//         >\r\n//           <CloseIcon />\r\n//         </IconButton>\r\n//       </DialogTitle>\r\n//       <DialogContent>\r\n//         <TextField \r\n//           label=\"Username\" \r\n//           name=\"username\" \r\n//           type=\"text\" \r\n//           fullWidth \r\n//           margin=\"dense\" \r\n//           value={formData.username} \r\n//           onChange={handleChange} \r\n//           required\r\n//         />\r\n//         <TextField \r\n//           label=\"Password\" \r\n//           name=\"password\" \r\n//           type=\"password\" \r\n//           fullWidth \r\n//           margin=\"dense\" \r\n//           value={formData.password} \r\n//           onChange={handleChange} \r\n//           required\r\n//         />\r\n//       </DialogContent>\r\n//       <DialogActions>\r\n//         <Button onClick={onClose} color=\"secondary\">Cancel</Button>\r\n//         <Button onClick={handleSubmit} color=\"primary\" variant=\"contained\">Login</Button>\r\n//       </DialogActions>\r\n\r\n//       {/* Snackbar for Feedback */}\r\n//       <Snackbar open={snackbarOpen} autoHideDuration={3000} onClose={() => setSnackbarOpen(false)}>\r\n//         <Alert onClose={() => setSnackbarOpen(false)} severity={message.type} sx={{ width: '100%' }}>\r\n//           {message.text}\r\n//         </Alert>\r\n//       </Snackbar>\r\n//     </Dialog>\r\n//   );\r\n// };\r\n\r\n// export default Login;\r\n// import React, { useState } from \"react\";\r\n// import { \r\n//   Dialog, DialogTitle, DialogContent, DialogActions, Button, TextField, IconButton, Snackbar, Alert \r\n// } from \"@mui/material\";\r\n// import CloseIcon from \"@mui/icons-material/Close\";\r\n// import axios from \"axios\";\r\n// import { useHistory } from \"react-router-dom\";  // ‚úÖ React Router v5\r\n\r\n// const Login = ({ open = false, onClose = () => {}, onLogin = () => {} }) => { \r\n//   const history = useHistory();  \r\n//   const [formData, setFormData] = useState({ username: \"\", password: \"\" });\r\n//   const [message, setMessage] = useState({ text: \"\", type: \"error\" });\r\n//   const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n\r\n//   const handleChange = (e) => {\r\n//     setFormData({ ...formData, [e.target.name]: e.target.value });\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     console.log(\"üîµ Sending Data:\", formData);\r\n\r\n//     try {\r\n//       const response = await axios.post(\"http://localhost:8080/api/users/login\", formData, {\r\n//         headers: { \"Content-Type\": \"application/json\" },\r\n//         withCredentials: true,\r\n//       });\r\n\r\n//       console.log(\"üü¢ Full Response:\", response);\r\n//       console.log(\"üü¢ Response Data:\", JSON.stringify(response.data, null, 2));\r\n\r\n//       const { token, role } = response.data;\r\n\r\n//       if (token) {\r\n//         localStorage.setItem(\"token\", token);\r\n//         localStorage.setItem(\"username\", formData.username);\r\n//         if (role) {\r\n//           localStorage.setItem(\"role\", role);\r\n//         }\r\n\r\n//         console.log(\"üîÄ Redirecting based on role:\", role);\r\n//         onLogin(token);\r\n//         setMessage({ text: \"‚úÖ Login successful! Redirecting...\", type: \"success\" });\r\n//         setSnackbarOpen(true);\r\n\r\n//         setTimeout(() => {\r\n//           onClose();  // ‚úÖ Close the login dialog\r\n//           if (role && role.toLowerCase() === \"artist\") {\r\n//             console.log(\"üé® Redirecting to /artist-dashboard\");\r\n//             history.push(\"/artist-dashboard\");\r\n//           } else {\r\n//             console.log(\"üè† Redirecting to /dashboard\");\r\n//             history.push(\"/dashboard\");\r\n//           }\r\n//         }, 1500);\r\n//       } else {\r\n//         console.error(\"‚ùå API did not return token. Response Data:\", response.data);\r\n//         setMessage({ text: \"‚ùå Login failed. No token received.\", type: \"error\" });\r\n//         setSnackbarOpen(true);\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"üî¥ Full API Error:\", error);\r\n\r\n//       if (error.response) {\r\n//         console.log(\"üî¥ Error Response Data:\", error.response.data);\r\n//         setMessage({ text: error.response.data?.message || \"‚ùå Invalid username or password\", type: \"error\" });\r\n//       } else if (error.request) {\r\n//         setMessage({ text: \"‚ö†Ô∏è Server not responding. Try again later.\", type: \"error\" });\r\n//       } else {\r\n//         setMessage({ text: \"‚ùå Request failed. Check network.\", type: \"error\" });\r\n//       }\r\n//       setSnackbarOpen(true);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <Dialog open={open} onClose={onClose}>\r\n//       <DialogTitle>\r\n//         Login\r\n//         <IconButton\r\n//           aria-label=\"close\"\r\n//           onClick={onClose}\r\n//           sx={{ position: \"absolute\", right: 8, top: 8 }}\r\n//         >\r\n//           <CloseIcon />\r\n//         </IconButton>\r\n//       </DialogTitle>\r\n//       <DialogContent>\r\n//         <TextField \r\n//           label=\"Username\" \r\n//           name=\"username\" \r\n//           type=\"text\" \r\n//           fullWidth \r\n//           margin=\"dense\" \r\n//           value={formData.username} \r\n//           onChange={handleChange} \r\n//           required\r\n//         />\r\n//         <TextField \r\n//           label=\"Password\" \r\n//           name=\"password\" \r\n//           type=\"password\" \r\n//           fullWidth \r\n//           margin=\"dense\" \r\n//           value={formData.password} \r\n//           onChange={handleChange} \r\n//           required\r\n//         />\r\n//       </DialogContent>\r\n//       <DialogActions>\r\n//         <Button onClick={onClose} color=\"secondary\">Cancel</Button>\r\n//         <Button onClick={handleSubmit} color=\"primary\" variant=\"contained\">Login</Button>\r\n//       </DialogActions>\r\n\r\n//       {/* Snackbar for Feedback */}\r\n//       <Snackbar open={snackbarOpen} autoHideDuration={3000} onClose={() => setSnackbarOpen(false)}>\r\n//         <Alert onClose={() => setSnackbarOpen(false)} severity={message.type} sx={{ width: '100%' }}>\r\n//           {message.text}\r\n//         </Alert>\r\n//       </Snackbar>\r\n//     </Dialog>\r\n//   );\r\n// };\r\n\r\n// export default Login;\r\n\r\n\r\nimport React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction Login() {\r\n  const history = useHistory(); // ‚úÖ Initialize history\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const handleLogin = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Simulating API response (Replace with actual API call)\r\n    const responseData = {\r\n      role: \"ARTIST\", // ‚úÖ Mock response, replace with actual response from backend\r\n      token: \"your-jwt-token\",\r\n    };\r\n\r\n    if (responseData) {\r\n      localStorage.setItem(\"role\", responseData.role.toLowerCase()); // ‚úÖ Store in lowercase\r\n      localStorage.setItem(\"token\", responseData.token);\r\n\r\n      console.log(\"üîÄ Redirecting based on role:\", responseData.role);\r\n\r\n      if (responseData.role.toLowerCase() === \"artist\") {\r\n        history.push(\"/artist-dashboard\"); // ‚úÖ Redirect using useHistory()\r\n      } else {\r\n        history.push(\"/dashboard\"); // Redirect to default user dashboard\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Login</h2>\r\n      <form onSubmit={handleLogin}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Email\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n        />\r\n        <button type=\"submit\">Login</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,UAAU,QAAQ,kBAAkB;AAE7C,SAASC,KAAKA,CAAA,EAAG;EACf,MAAMC,OAAO,GAAGF,UAAU,CAAC,CAAC,CAAC,CAAC;EAC9B,MAAM,CAACG,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACM,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMQ,WAAW,GAAG,MAAOC,CAAC,IAAK;IAC/BA,CAAC,CAACC,cAAc,CAAC,CAAC;;IAElB;IACA,MAAMC,YAAY,GAAG;MACnBC,IAAI,EAAE,QAAQ;MAAE;MAChBC,KAAK,EAAE;IACT,CAAC;IAED,IAAIF,YAAY,EAAE;MAChBG,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEJ,YAAY,CAACC,IAAI,CAACI,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;MAC/DF,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,YAAY,CAACE,KAAK,CAAC;MAEjDI,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEP,YAAY,CAACC,IAAI,CAAC;MAE/D,IAAID,YAAY,CAACC,IAAI,CAACI,WAAW,CAAC,CAAC,KAAK,QAAQ,EAAE;QAChDb,OAAO,CAACgB,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC;MACrC,CAAC,MAAM;QACLhB,OAAO,CAACgB,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;MAC9B;IACF;EACF,CAAC;EAED,oBACEpB,KAAA,CAAAqB,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACE3B,KAAA,CAAAqB,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAI,OAAS,CAAC,eACd3B,KAAA,CAAAqB,aAAA;IAAMO,QAAQ,EAAEnB,WAAY;IAAAa,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC1B3B,KAAA,CAAAqB,aAAA;IACEQ,IAAI,EAAC,MAAM;IACXC,WAAW,EAAC,OAAO;IACnBC,KAAK,EAAE1B,KAAM;IACb2B,QAAQ,EAAGtB,CAAC,IAAKJ,QAAQ,CAACI,CAAC,CAACuB,MAAM,CAACF,KAAK,CAAE;IAAAT,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAC3C,CAAC,eACF3B,KAAA,CAAAqB,aAAA;IACEQ,IAAI,EAAC,UAAU;IACfC,WAAW,EAAC,UAAU;IACtBC,KAAK,EAAExB,QAAS;IAChByB,QAAQ,EAAGtB,CAAC,IAAKF,WAAW,CAACE,CAAC,CAACuB,MAAM,CAACF,KAAK,CAAE;IAAAT,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAC9C,CAAC,eACF3B,KAAA,CAAAqB,aAAA;IAAQQ,IAAI,EAAC,QAAQ;IAAAP,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,OAAa,CAC/B,CACH,CAAC;AAEV;AAEA,eAAexB,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module"}