{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pallavi\\\\Desktop\\\\React\\\\firstapp\\\\src\\\\components\\\\userboard\\\\OrderDetails.js\";\n// import React, { useEffect, useState } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n// import axios from \"axios\";\n\n// const OrderDetails = () => {\n//   const { orderId } = useParams(); // Route: /orders/:orderId\n//   const numericOrderId = Number(orderId);\n//   const stripe = useStripe();\n//   const elements = useElements();\n\n//   const [payment, setPayment] = useState(null);\n//   const [clientSecret, setClientSecret] = useState(\"\");\n//   const [loading, setLoading] = useState(true);\n//   const [paymentStatus, setPaymentStatus] = useState(\"\");\n//   const [error, setError] = useState(\"\");\n\n//   const token = localStorage.getItem(\"token\");\n\n//   useEffect(() => {\n//     const fetchPaymentIntentAndDetails = async () => {\n//       try {\n//         // 1. Create Payment Intent\n//         const intentRes = await axios.post(\n//           \"http://localhost:8080/api/payments/create-payment-intent\",\n//           { orderId: numericOrderId },\n//           {\n//             headers: {\n//               Authorization: `Bearer ${token}`,\n//             },\n//           }\n//         );\n\n//         setClientSecret(intentRes.data.clientSecret);\n\n//         // 2. Fetch Payment Details (includes order & artwork info)\n//         const paymentRes = await axios.get(\n//           `http://localhost:8080/api/payments/${orderId}`,\n//           {\n//             headers: {\n//               Authorization: `Bearer ${token}`,\n//             },\n//           }\n//         );\n//         console.log(\"Fetched payment data:\", paymentRes.data);\n//         setPayment(paymentRes.data);\n//         setLoading(false);\n//       } catch (err) {\n//         console.error(\"Error during payment setup or fetch:\", err);\n//         if (err.response) {\n//           if (err.response.status === 403) {\n//             setError(\"You are not authorized to view this order.\");\n//           } else if (err.response.status === 500) {\n//             setError(\"Something went wrong with payment creation.\");\n//           } else {\n//             setError(\"Failed to initiate payment.\");\n//           }\n//         } else {\n//           setError(\"Network or server error occurred.\");\n//         }\n\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchPaymentIntentAndDetails();\n//   }, [orderId, token]);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (!stripe || !elements) return;\n\n//     const result = await stripe.confirmCardPayment(clientSecret, {\n//       payment_method: {\n//         card: elements.getElement(CardElement),\n//       },\n//     });\n\n//     if (result.error) {\n//       setError(result.error.message);\n//     } else {\n//       const stripeStatus = result.paymentIntent.status;\n//       console.log(\"Stripe status:\", stripeStatus);\n\n//       let mappedStatus;\n//       if (stripeStatus === \"succeeded\") {\n//         mappedStatus = \"COMPLETED\";\n//       } else if (stripeStatus === \"processing\") {\n//         mappedStatus = \"PENDING\";\n//       } else {\n//         mappedStatus = \"FAILED\";\n//       }\n\n//       try {\n//         await axios.post(\n//           \"http://localhost:8080/api/payments/confirm\",\n//           {\n//             transactionId: result.paymentIntent.id,\n//             status: mappedStatus,\n//           },\n//           {\n//             headers: {\n//               Authorization: `Bearer ${token}`,\n//             },\n//           }\n//         );\n\n//         if (mappedStatus === \"COMPLETED\") {\n//           setPaymentStatus(\"Payment successful!\");\n//         } else {\n//           setPaymentStatus(\"Payment submitted but not completed.\");\n//         }\n//       } catch (err) {\n//         console.error(\"Error confirming payment:\", err);\n//         setError(\"Failed to confirm payment to server.\");\n//       }\n//     }\n//   };\n\n//   if (loading) return <p className=\"text-white text-center mt-10\">Loading...</p>;\n//   if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\n\n//   const order = payment?.order;  // Access order details from payment object\n\n//   return (\n//     <div className=\"max-w-lg mx-auto mt-10 bg-white p-6 rounded-xl shadow-lg\">\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">Order Payment</h2>\n//       <div className=\"mb-4\">\n//       <p><strong>Artwork Title:</strong> {payment?.artworkTitle}</p>\n//       <p><strong>Buyer Username:</strong> {payment?.buyerUsername}</p>\n//        {/* Use amount here */}\n//         <p><strong>Transaction ID:</strong> {payment.transactionId}</p>\n//         <p><strong>Amount:</strong> {payment.amount}</p>\n\n//       </div>\n\n//       <form onSubmit={handleSubmit}>\n//         <div className=\"mb-4 p-4 border rounded\">\n//           <CardElement />\n//         </div>\n//         <button\n//           type=\"submit\"\n//           disabled={!stripe || !elements}\n//           className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n//         >\n//           Pay Now\n//         </button>\n//       </form>\n\n//       {paymentStatus && <p className=\"mt-4 text-green-600\">{paymentStatus}</p>}\n//     </div>\n//   );\n// };\n\n// export default OrderDetails;\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom'; // For getting the orderId from the URL\nimport { useStripe, useElements, CardElement } from '@stripe/react-stripe-js'; // For Stripe Payment\nimport axios from 'axios'; // For making HTTP requests\n\nconst OrderDetails = () => {\n  const {\n    orderId\n  } = useParams(); // Route: /orders/:orderId\n  const numericOrderId = Number(orderId);\n  const stripe = useStripe();\n  const elements = useElements();\n  const [payment, setPayment] = useState(null);\n  const [clientSecret, setClientSecret] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [paymentStatus, setPaymentStatus] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const token = localStorage.getItem(\"token\");\n  useEffect(() => {\n    const fetchPaymentIntentAndDetails = async () => {\n      try {\n        // 1. Create Payment Intent\n        const intentRes = await axios.post(\"http://localhost:8080/api/payments/create-payment-intent\", {\n          orderId: numericOrderId\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setClientSecret(intentRes.data.clientSecret);\n\n        // 2. Fetch Payment Details (includes order & artwork info)\n        const paymentRes = await axios.get(`http://localhost:8080/api/payments/${orderId}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        console.log(\"Fetched payment data:\", paymentRes.data);\n        setPayment(paymentRes.data);\n        setLoading(false);\n      } catch (err) {\n        console.error(\"Error during payment setup or fetch:\", err);\n        if (err.response) {\n          if (err.response.status === 403) {\n            setError(\"You are not authorized to view this order.\");\n          } else if (err.response.status === 500) {\n            setError(\"Something went wrong with payment creation.\");\n          } else {\n            setError(\"Failed to initiate payment.\");\n          }\n        } else {\n          setError(\"Network or server error occurred.\");\n        }\n        setLoading(false);\n      }\n    };\n    fetchPaymentIntentAndDetails();\n  }, [orderId, token]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!stripe || !elements) return;\n    const result = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement)\n      }\n    });\n    if (result.error) {\n      setError(result.error.message);\n    } else {\n      const stripeStatus = result.paymentIntent.status;\n      console.log(\"Stripe status:\", stripeStatus);\n      let mappedStatus;\n      if (stripeStatus === \"succeeded\") {\n        mappedStatus = \"COMPLETED\";\n      } else if (stripeStatus === \"processing\") {\n        mappedStatus = \"PENDING\";\n      } else {\n        mappedStatus = \"FAILED\";\n      }\n      try {\n        await axios.post(\"http://localhost:8080/api/payments/confirm\", {\n          transactionId: result.paymentIntent.id,\n          status: mappedStatus\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (mappedStatus === \"COMPLETED\") {\n          setPaymentStatus(\"Payment successful!\");\n        } else {\n          setPaymentStatus(\"Payment submitted but not completed.\");\n        }\n      } catch (err) {\n        console.error(\"Error confirming payment:\", err);\n        setError(\"Failed to confirm payment to server.\");\n      }\n    }\n  };\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-white text-center mt-10\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-red-500 text-center mt-10\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 21\n    }\n  }, error);\n  const order = payment === null || payment === void 0 ? void 0 : payment.order; // Access order details from payment object\n\n  // return (\n  //   <div className=\"max-w-lg mx-auto mt-10 bg-white p-6 rounded-xl shadow-lg\">\n  //     <h2 className=\"text-2xl font-bold mb-4 text-center\">Order Payment</h2>\n  //     <div className=\"mb-4\">\n\n  //       <p><strong>Transaction ID:</strong> {payment.transactionId}</p>\n  //       <p><strong>Amount:</strong> {payment.amount}</p>\n  //     </div>\n\n  //     <form onSubmit={handleSubmit}>\n  //       <div className=\"mb-4 p-4 border rounded\">\n  //         <CardElement />\n  //       </div>\n  //       <button\n  //         type=\"submit\"\n  //         disabled={!stripe || !elements}\n  //         className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n  //       >\n  //         Pay Now\n  //       </button>\n  //     </form>\n\n  //     {paymentStatus && <p className=\"mt-4 text-green-600\">{paymentStatus}</p>}\n\n  //     {/* Display Download Button */}\n  //     {paymentStatus === \"Payment successful!\" && payment?.downloadUrl && (\n  //       <div className=\"mt-4 text-center\">\n  //         <a\n  //           href={payment?.downloadUrl}\n  //           download\n  //           className=\"inline-block bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded\"\n  //         >\n  //           Download Artwork\n  //         </a>\n  //       </div>\n  //     )}\n  //   </div>\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"min-h-screen bg-gray-100 flex items-center justify-center px-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bg-white shadow-2xl rounded-2xl p-8 w-full max-w-md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"text-3xl font-extrabold text-center text-gray-800 mb-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 9\n    }\n  }, \"Order Payment\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bg-gray-50 p-4 rounded-lg mb-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-gray-700\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 40\n    }\n  }, \"Transaction ID:\"), \" \", payment.transactionId), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-gray-700\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 40\n    }\n  }, \"Amount:\"), \" \\u20B9\", payment.amount)), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"space-y-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"p-4 border border-gray-300 rounded-lg shadow-sm bg-white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CardElement, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    disabled: !stripe || !elements,\n    className: \"w-full bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded-lg transition duration-300\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 11\n    }\n  }, \"Pay Now\")), paymentStatus && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"mt-4 text-center text-green-600 font-semibold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 11\n    }\n  }, paymentStatus), paymentStatus === \"Payment successful!\" && (payment === null || payment === void 0 ? void 0 : payment.downloadUrl) && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mt-6 text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: payment.downloadUrl,\n    download: true,\n    className: \"bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg transition duration-300\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 13\n    }\n  }, \"Download Artwork\"))));\n};\nexport default OrderDetails;","map":{"version":3,"names":["React","useState","useEffect","useParams","useStripe","useElements","CardElement","axios","OrderDetails","orderId","numericOrderId","Number","stripe","elements","payment","setPayment","clientSecret","setClientSecret","loading","setLoading","paymentStatus","setPaymentStatus","error","setError","token","localStorage","getItem","fetchPaymentIntentAndDetails","intentRes","post","headers","Authorization","data","paymentRes","get","console","log","err","response","status","handleSubmit","e","preventDefault","result","confirmCardPayment","payment_method","card","getElement","message","stripeStatus","paymentIntent","mappedStatus","transactionId","id","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","order","amount","onSubmit","type","disabled","downloadUrl","href","download"],"sources":["C:/Users/Pallavi/Desktop/React/firstapp/src/components/userboard/OrderDetails.js"],"sourcesContent":["\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { useParams } from \"react-router-dom\";\r\n// import { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\r\n// import axios from \"axios\";\r\n\r\n// const OrderDetails = () => {\r\n//   const { orderId } = useParams(); // Route: /orders/:orderId\r\n//   const numericOrderId = Number(orderId);\r\n//   const stripe = useStripe();\r\n//   const elements = useElements();\r\n\r\n//   const [payment, setPayment] = useState(null);\r\n//   const [clientSecret, setClientSecret] = useState(\"\");\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [paymentStatus, setPaymentStatus] = useState(\"\");\r\n//   const [error, setError] = useState(\"\");\r\n\r\n//   const token = localStorage.getItem(\"token\");\r\n\r\n//   useEffect(() => {\r\n//     const fetchPaymentIntentAndDetails = async () => {\r\n//       try {\r\n//         // 1. Create Payment Intent\r\n//         const intentRes = await axios.post(\r\n//           \"http://localhost:8080/api/payments/create-payment-intent\",\r\n//           { orderId: numericOrderId },\r\n//           {\r\n//             headers: {\r\n//               Authorization: `Bearer ${token}`,\r\n//             },\r\n//           }\r\n//         );\r\n\r\n//         setClientSecret(intentRes.data.clientSecret);\r\n\r\n//         // 2. Fetch Payment Details (includes order & artwork info)\r\n//         const paymentRes = await axios.get(\r\n//           `http://localhost:8080/api/payments/${orderId}`,\r\n//           {\r\n//             headers: {\r\n//               Authorization: `Bearer ${token}`,\r\n//             },\r\n//           }\r\n//         );\r\n//         console.log(\"Fetched payment data:\", paymentRes.data);\r\n//         setPayment(paymentRes.data);\r\n//         setLoading(false);\r\n//       } catch (err) {\r\n//         console.error(\"Error during payment setup or fetch:\", err);\r\n//         if (err.response) {\r\n//           if (err.response.status === 403) {\r\n//             setError(\"You are not authorized to view this order.\");\r\n//           } else if (err.response.status === 500) {\r\n//             setError(\"Something went wrong with payment creation.\");\r\n//           } else {\r\n//             setError(\"Failed to initiate payment.\");\r\n//           }\r\n//         } else {\r\n//           setError(\"Network or server error occurred.\");\r\n//         }\r\n\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchPaymentIntentAndDetails();\r\n//   }, [orderId, token]);\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n\r\n//     if (!stripe || !elements) return;\r\n\r\n//     const result = await stripe.confirmCardPayment(clientSecret, {\r\n//       payment_method: {\r\n//         card: elements.getElement(CardElement),\r\n//       },\r\n//     });\r\n\r\n//     if (result.error) {\r\n//       setError(result.error.message);\r\n//     } else {\r\n//       const stripeStatus = result.paymentIntent.status;\r\n//       console.log(\"Stripe status:\", stripeStatus);\r\n\r\n//       let mappedStatus;\r\n//       if (stripeStatus === \"succeeded\") {\r\n//         mappedStatus = \"COMPLETED\";\r\n//       } else if (stripeStatus === \"processing\") {\r\n//         mappedStatus = \"PENDING\";\r\n//       } else {\r\n//         mappedStatus = \"FAILED\";\r\n//       }\r\n\r\n//       try {\r\n//         await axios.post(\r\n//           \"http://localhost:8080/api/payments/confirm\",\r\n//           {\r\n//             transactionId: result.paymentIntent.id,\r\n//             status: mappedStatus,\r\n//           },\r\n//           {\r\n//             headers: {\r\n//               Authorization: `Bearer ${token}`,\r\n//             },\r\n//           }\r\n//         );\r\n\r\n//         if (mappedStatus === \"COMPLETED\") {\r\n//           setPaymentStatus(\"Payment successful!\");\r\n//         } else {\r\n//           setPaymentStatus(\"Payment submitted but not completed.\");\r\n//         }\r\n//       } catch (err) {\r\n//         console.error(\"Error confirming payment:\", err);\r\n//         setError(\"Failed to confirm payment to server.\");\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   if (loading) return <p className=\"text-white text-center mt-10\">Loading...</p>;\r\n//   if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n\r\n//   const order = payment?.order;  // Access order details from payment object\r\n\r\n//   return (\r\n//     <div className=\"max-w-lg mx-auto mt-10 bg-white p-6 rounded-xl shadow-lg\">\r\n//       <h2 className=\"text-2xl font-bold mb-4 text-center\">Order Payment</h2>\r\n//       <div className=\"mb-4\">\r\n//       <p><strong>Artwork Title:</strong> {payment?.artworkTitle}</p>\r\n//       <p><strong>Buyer Username:</strong> {payment?.buyerUsername}</p>\r\n//        {/* Use amount here */}\r\n//         <p><strong>Transaction ID:</strong> {payment.transactionId}</p>\r\n//         <p><strong>Amount:</strong> {payment.amount}</p>\r\n        \r\n\r\n//       </div>\r\n\r\n//       <form onSubmit={handleSubmit}>\r\n//         <div className=\"mb-4 p-4 border rounded\">\r\n//           <CardElement />\r\n//         </div>\r\n//         <button\r\n//           type=\"submit\"\r\n//           disabled={!stripe || !elements}\r\n//           className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\r\n//         >\r\n//           Pay Now\r\n//         </button>\r\n//       </form>\r\n\r\n//       {paymentStatus && <p className=\"mt-4 text-green-600\">{paymentStatus}</p>}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default OrderDetails;\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom'; // For getting the orderId from the URL\r\nimport { useStripe, useElements, CardElement } from '@stripe/react-stripe-js'; // For Stripe Payment\r\nimport axios from 'axios'; // For making HTTP requests\r\n\r\nconst OrderDetails = () => {\r\n  const { orderId } = useParams(); // Route: /orders/:orderId\r\n  const numericOrderId = Number(orderId);\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n\r\n  const [payment, setPayment] = useState(null);\r\n  const [clientSecret, setClientSecret] = useState(\"\");\r\n  const [loading, setLoading] = useState(true);\r\n  const [paymentStatus, setPaymentStatus] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const token = localStorage.getItem(\"token\");\r\n\r\n  useEffect(() => {\r\n    const fetchPaymentIntentAndDetails = async () => {\r\n      try {\r\n        // 1. Create Payment Intent\r\n        const intentRes = await axios.post(\r\n          \"http://localhost:8080/api/payments/create-payment-intent\",\r\n          { orderId: numericOrderId },\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`,\r\n            },\r\n          }\r\n        );\r\n\r\n        setClientSecret(intentRes.data.clientSecret);\r\n\r\n        // 2. Fetch Payment Details (includes order & artwork info)\r\n        const paymentRes = await axios.get(\r\n          `http://localhost:8080/api/payments/${orderId}`,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`,\r\n            },\r\n          }\r\n        );\r\n        console.log(\"Fetched payment data:\", paymentRes.data);\r\n        setPayment(paymentRes.data);\r\n        setLoading(false);\r\n      } catch (err) {\r\n        console.error(\"Error during payment setup or fetch:\", err);\r\n        if (err.response) {\r\n          if (err.response.status === 403) {\r\n            setError(\"You are not authorized to view this order.\");\r\n          } else if (err.response.status === 500) {\r\n            setError(\"Something went wrong with payment creation.\");\r\n          } else {\r\n            setError(\"Failed to initiate payment.\");\r\n          }\r\n        } else {\r\n          setError(\"Network or server error occurred.\");\r\n        }\r\n\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchPaymentIntentAndDetails();\r\n  }, [orderId, token]);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!stripe || !elements) return;\r\n\r\n    const result = await stripe.confirmCardPayment(clientSecret, {\r\n      payment_method: {\r\n        card: elements.getElement(CardElement),\r\n      },\r\n    });\r\n\r\n    if (result.error) {\r\n      setError(result.error.message);\r\n    } else {\r\n      const stripeStatus = result.paymentIntent.status;\r\n      console.log(\"Stripe status:\", stripeStatus);\r\n\r\n      let mappedStatus;\r\n      if (stripeStatus === \"succeeded\") {\r\n        mappedStatus = \"COMPLETED\";\r\n      } else if (stripeStatus === \"processing\") {\r\n        mappedStatus = \"PENDING\";\r\n      } else {\r\n        mappedStatus = \"FAILED\";\r\n      }\r\n\r\n      try {\r\n        await axios.post(\r\n          \"http://localhost:8080/api/payments/confirm\",\r\n          {\r\n            transactionId: result.paymentIntent.id,\r\n            status: mappedStatus,\r\n          },\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`,\r\n            },\r\n          }\r\n        );\r\n\r\n        if (mappedStatus === \"COMPLETED\") {\r\n          setPaymentStatus(\"Payment successful!\");\r\n        } else {\r\n          setPaymentStatus(\"Payment submitted but not completed.\");\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Error confirming payment:\", err);\r\n        setError(\"Failed to confirm payment to server.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  if (loading) return <p className=\"text-white text-center mt-10\">Loading...</p>;\r\n  if (error) return <p className=\"text-red-500 text-center mt-10\">{error}</p>;\r\n\r\n  const order = payment?.order;  // Access order details from payment object\r\n\r\n  // return (\r\n  //   <div className=\"max-w-lg mx-auto mt-10 bg-white p-6 rounded-xl shadow-lg\">\r\n  //     <h2 className=\"text-2xl font-bold mb-4 text-center\">Order Payment</h2>\r\n  //     <div className=\"mb-4\">\r\n        \r\n  //       <p><strong>Transaction ID:</strong> {payment.transactionId}</p>\r\n  //       <p><strong>Amount:</strong> {payment.amount}</p>\r\n  //     </div>\r\n\r\n  //     <form onSubmit={handleSubmit}>\r\n  //       <div className=\"mb-4 p-4 border rounded\">\r\n  //         <CardElement />\r\n  //       </div>\r\n  //       <button\r\n  //         type=\"submit\"\r\n  //         disabled={!stripe || !elements}\r\n  //         className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\r\n  //       >\r\n  //         Pay Now\r\n  //       </button>\r\n  //     </form>\r\n\r\n  //     {paymentStatus && <p className=\"mt-4 text-green-600\">{paymentStatus}</p>}\r\n\r\n  //     {/* Display Download Button */}\r\n  //     {paymentStatus === \"Payment successful!\" && payment?.downloadUrl && (\r\n  //       <div className=\"mt-4 text-center\">\r\n  //         <a\r\n  //           href={payment?.downloadUrl}\r\n  //           download\r\n  //           className=\"inline-block bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded\"\r\n  //         >\r\n  //           Download Artwork\r\n  //         </a>\r\n  //       </div>\r\n  //     )}\r\n  //   </div>\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-100 flex items-center justify-center px-4\">\r\n      <div className=\"bg-white shadow-2xl rounded-2xl p-8 w-full max-w-md\">\r\n        <h2 className=\"text-3xl font-extrabold text-center text-gray-800 mb-6\">Order Payment</h2>\r\n  \r\n        <div className=\"bg-gray-50 p-4 rounded-lg mb-6\">\r\n          <p className=\"text-gray-700\"><strong>Transaction ID:</strong> {payment.transactionId}</p>\r\n          <p className=\"text-gray-700\"><strong>Amount:</strong> ₹{payment.amount}</p>\r\n        </div>\r\n  \r\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n          <div className=\"p-4 border border-gray-300 rounded-lg shadow-sm bg-white\">\r\n            <CardElement />\r\n          </div>\r\n          <button\r\n            type=\"submit\"\r\n            disabled={!stripe || !elements}\r\n            className=\"w-full bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded-lg transition duration-300\"\r\n          >\r\n            Pay Now\r\n          </button>\r\n        </form>\r\n  \r\n        {paymentStatus && (\r\n          <p className=\"mt-4 text-center text-green-600 font-semibold\">{paymentStatus}</p>\r\n        )}\r\n  \r\n        {paymentStatus === \"Payment successful!\" && payment?.downloadUrl && (\r\n          <div className=\"mt-6 text-center\">\r\n            <a\r\n              href={payment.downloadUrl}\r\n              download\r\n              className=\"bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg transition duration-300\"\r\n            >\r\n              Download Artwork\r\n            </a>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n  \r\n};\r\n\r\nexport default OrderDetails;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module"}